Search.setIndex({"titles": ["Changelog", "Citing MISPR", "MISPR documentation", "Configuration Files", "Prerequisites", "Installation", "Running a Test Workflow", "Keywords", "License", "mispr package", "mispr.common package", "mispr.gaussian package", "mispr.gaussian.firetasks package", "mispr.gaussian.fireworks package", "mispr.gaussian.utilities package", "mispr.gaussian.workflows package", "mispr.gaussian.workflows.base package", "mispr.hybrid package", "mispr.hybrid.firetasks package", "mispr.hybrid.workflows package", "mispr.lammps package", "mispr.lammps.firetasks package", "mispr.lammps.fireworks package", "mispr.lammps.tests package", "mispr.lammps.utilities package", "mispr.lammps.workflows package", "mispr", "Overview", "FAQ", "Helpful Links", "Workflow Basics", "Creating Custom Workflows", "Supported Workflows", "Workflow Tutorials"], "terms": {"v0": 0, "0": [0, 6, 12, 13, 14, 16, 19, 25, 33], "1": [0, 1, 3, 4, 6, 12, 13, 14, 16, 18, 19, 21, 23, 33], "initi": [0, 4, 12, 13, 16, 19, 25, 27, 30, 32], "releas": [0, 8], "r": [0, 24, 33], "atwi": [0, 1, 2], "m": [0, 6, 24], "bliss": [0, 1], "4": [0, 6, 14, 16, 33], "support": [0, 12, 13, 14, 16, 19, 21, 22, 24, 25, 27, 33], "retriev": [0, 4, 10, 11, 12, 13, 14, 22, 33], "molecul": [0, 4, 6, 10, 11, 12, 13, 14, 16, 19, 21, 22, 24, 25, 27, 30, 33], "from": [0, 4, 5, 6, 8, 10, 11, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 27, 29, 30, 32, 33], "pubchem": [0, 9, 14, 19, 26, 33], "directli": [0, 5, 6, 12, 16, 21, 33], "us": [0, 1, 2, 3, 4, 6, 8, 10, 11, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 27, 29, 30, 32, 33], "them": [0, 3, 4, 12, 14, 16, 21, 27, 30, 32], "workflow": [0, 1, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 17, 20, 24, 27, 29], "opl": [0, 9, 20, 21, 22, 32], "2005": [0, 24], "ff": [0, 21, 22, 25], "run": [0, 2, 3, 4, 5, 7, 9, 11, 12, 13, 14, 16, 18, 19, 20, 22, 23, 25, 30, 32], "maestro": [0, 21, 24], "backend": [0, 4], "option": [0, 3, 4, 5, 10, 11, 12, 13, 14, 16, 19, 21, 22, 24, 25, 30, 33], "charg": [0, 4, 8, 12, 13, 14, 16, 19, 21, 22, 24, 30, 32, 33], "scale": [0, 12, 16, 21, 27], "ionic": 0, "speci": [0, 19, 21, 22, 24, 25, 27], "when": [0, 3, 4, 6, 10, 12, 14, 16, 18, 21, 23, 24, 25], "prepar": [0, 5], "lammp": [0, 3, 4, 9, 19, 26, 27, 29, 30, 32], "data": [0, 4, 6, 9, 12, 14, 18, 19, 20, 21, 22, 24, 25, 27, 30], "file": [0, 2, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 19, 21, 22, 24, 25, 27, 30, 32, 33], "automat": [0, 3, 4, 19, 27], "identif": [0, 14], "system": [0, 3, 4, 21, 22, 24, 25, 27, 30, 33], "element": [0, 12, 13, 24], "type": [0, 3, 4, 5, 10, 11, 12, 13, 14, 15, 16, 19, 20, 21, 22, 24, 25, 32], "creat": [0, 3, 5, 6, 7, 11, 12, 13, 14, 16, 19, 21, 24, 25, 30, 32, 33], "dump": [0, 21], "simul": [0, 1, 2, 4, 5, 19, 21, 22, 25, 27, 29, 32], "addit": [0, 2, 6, 11, 12, 13, 14, 16, 18, 19, 21, 23, 25], "mdproptool": [0, 4, 19, 21, 27], "packag": [0, 3, 5, 26, 27, 30], "analysi": [0, 12, 16, 19, 21, 22, 25, 30, 32, 33], "md": [0, 1, 2, 4, 5, 19, 27, 29, 30, 32], "trajectori": [0, 4, 21, 22, 27, 32], "depend": [0, 2, 5, 6, 12, 13, 14, 16, 19, 22, 25, 30], "If": [1, 2, 3, 4, 5, 6, 11, 12, 14, 16, 19, 21, 22, 24, 25, 33], "you": [1, 2, 3, 4, 5, 6, 12, 18, 21, 23, 24, 33], "find": [1, 3, 12, 14, 16, 33], "your": [1, 3, 5, 6], "research": 1, "pleas": [1, 2, 3, 19], "consid": [1, 16], "follow": [1, 2, 3, 4, 5, 6, 8, 12, 14, 16, 19, 21, 24, 25, 30, 33], "paper": 1, "articl": 1, "atwi2022mispr": 1, "titl": 1, "an": [1, 3, 4, 6, 8, 10, 12, 13, 14, 16, 18, 19, 21, 22, 23, 25, 27, 30], "autom": [1, 27, 29, 30], "infrastructur": [1, 27, 30], "high": [1, 27, 29], "throughput": [1, 27], "dft": [1, 2, 4, 5, 19, 27, 30, 32], "author": [1, 8], "rasha": [1, 2], "matthew": 1, "makeev": 1, "maxim": 1, "rajput": 1, "nav": 1, "nidhi": 1, "year": 1, "2022": [1, 6, 8, 32], "download": [1, 4, 10, 14, 24, 33], "bibtex": [1, 14], "2": [1, 3, 6, 12, 13, 16, 18, 19, 21, 23, 24, 25, 33], "hybrid": [1, 9, 26, 27, 29, 32], "nmr": [1, 9, 11, 12, 15, 17, 27, 29, 32], "atwi2022autom": 1, "framework": 1, "predict": [1, 4, 29, 30], "chemic": [1, 14, 24, 27, 29, 30, 32], "shift": [1, 27, 29, 32], "within": [1, 3, 27], "liquid": [1, 12, 16, 19, 27], "solut": [1, 11, 12, 16, 19, 25, 27], "chen": 1, "ying": 1, "han": 1, "kee": 1, "sung": 1, "mueller": 1, "karl": 1, "t": [1, 4, 14, 24], "murugesan": 1, "vijayakumar": 1, "journal": 1, "natur": 1, "comput": [1, 2, 3, 5, 7, 14, 16, 19, 27, 29, 30], "scienc": [1, 2, 27, 30], "volum": 1, "number": [1, 3, 4, 12, 14, 16, 19, 21, 25, 27, 32, 33], "page": [1, 3, 28, 31, 33], "112": 1, "122": 1, "publish": [1, 8], "group": [1, 11, 12, 14, 19], "i": [2, 3, 4, 5, 6, 7, 8, 10, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 27, 28, 30, 31, 33], "python": [2, 5, 6, 7, 11, 27, 29, 30, 33], "librari": [2, 4], "materi": [2, 27, 29], "contain": [2, 3, 6, 11, 12, 14, 18, 21, 23, 24, 25, 30, 33], "preset": [2, 30, 32], "complex": [2, 6, 16, 21, 25, 27], "hierarch": 2, "densiti": [2, 11, 12, 19, 27], "function": [2, 10, 11, 12, 14, 16, 19, 21, 22, 24, 25, 27, 30], "theori": [2, 12, 24, 27], "classic": [2, 27], "molecular": [2, 4, 12, 14, 16, 21, 22, 24, 27, 30], "dynam": [2, 4, 16, 21, 27], "properti": [2, 4, 11, 12, 14, 16, 22, 27, 29, 30], "pip": [2, 4], "befor": [2, 3, 4, 5, 6, 12, 14], "can": [2, 3, 4, 5, 6, 11, 12, 14, 16, 18, 19, 21, 23, 25, 27, 30, 32, 33], "start": [2, 4, 5, 6, 14], "ar": [2, 3, 4, 5, 6, 7, 12, 13, 14, 16, 19, 21, 22, 24, 25, 27, 30, 32, 33], "step": [2, 5, 6, 12, 14, 16, 19, 25, 30, 32, 33], "need": [2, 3, 4, 5, 6, 12, 21, 24], "refer": [2, 3, 6, 12, 13, 14, 16, 19, 21, 25, 33], "guid": [2, 4, 27], "complet": [2, 6, 7, 30], "setup": [2, 30], "instruct": [2, 4, 5], "includ": [2, 3, 4, 6, 8, 11, 12, 14, 16, 19, 27, 29, 30], "ani": [2, 5, 8, 11, 12, 14, 16, 19, 25, 32], "configur": [2, 4, 5, 6, 7, 12, 13, 16, 19, 22, 24, 25, 32], "requir": [2, 3, 14, 16, 19, 21], "about": [2, 21, 24, 30], "overview": 2, "prerequisit": 2, "basic": [2, 3, 5], "extern": 2, "how": [2, 3, 4, 6, 19, 25, 29], "tos": 2, "tutori": [2, 3, 6, 29], "faq": 2, "code": [2, 5, 6, 11], "subpackag": [2, 26], "contirbut": 2, "form": [2, 3, 4, 10, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 30, 33], "request": [2, 16, 33], "ad": [2, 3, 12, 14], "new": [2, 4, 11, 12, 14, 16, 30], "featur": [2, 4, 27], "fix": 2, "bug": 2, "issu": 2, "exampl": [2, 3, 4, 6, 12, 16, 18, 21, 23, 30, 33], "want": [2, 3, 4, 5, 6, 19], "add": [2, 4, 12, 14, 16, 21, 24, 33], "chang": [2, 3, 4, 5, 16], "someth": [2, 6], "do": [2, 3, 4, 8, 14, 24], "thi": [2, 3, 4, 5, 6, 8, 11, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 28, 31, 33], "fork": 2, "github": [2, 4, 5], "submit": [2, 33], "pull": [2, 5], "we": [2, 3, 4, 6, 14, 30, 33], "review": 2, "move": [2, 3, 11], "where": [2, 3, 4, 6, 7, 12, 14, 16, 19, 24, 25, 30], "its": [2, 4, 5, 6, 12, 13, 14], "progress": 2, "track": [2, 14], "For": [2, 3, 5, 12, 18, 21, 23, 24, 30, 33], "other": [2, 3, 4, 8, 11, 12, 13, 14, 22, 27, 30, 32, 33], "inquiri": 2, "contact": 2, "u": [2, 14], "stonybrook": 2, "edu": 2, "after": [3, 4, 6, 19, 21, 30], "set": [3, 5, 6, 11, 12, 13, 14, 16, 18, 19, 21, 23, 24, 25], "up": [3, 5, 6, 12, 14, 19, 21, 24], "environ": [3, 5, 6, 7, 24, 27, 29], "instal": [3, 4, 6, 16, 24], "softwar": [3, 5, 6, 8, 24, 27, 30], "work": [3, 4, 6, 10, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 27, 33], "done": [3, 12, 27], "intend": [3, 21, 23, 24], "help": [3, 11, 14], "get": [3, 4, 12, 13, 14, 16, 18, 19, 21, 23], "first": [3, 5, 6, 11, 12, 14, 16], "time": [3, 4, 6, 12, 14, 30], "firework": [3, 4, 6, 7, 9, 11, 12, 14, 16, 18, 20, 21, 23, 25, 27, 29, 30, 33], "mispr": [3, 4, 6, 8, 27, 29, 30, 32, 33], "so": [3, 8, 30], "learn": [3, 4], "document": [3, 4, 6, 8, 11, 12, 13, 14, 16, 19, 21, 22, 30], "more": [3, 4, 6, 11, 12, 13, 14, 21, 24, 25, 30], "inform": [3, 6, 19, 21, 24, 25, 27, 30], "here": [3, 6, 16, 19], "onli": [3, 4, 6, 12, 16, 19, 21, 25], "discuss": 3, "which": [3, 4, 6, 11, 12, 14, 16, 18, 21, 23, 27], "suffici": 3, "db": [3, 6, 11, 12, 13, 14, 16, 19, 21, 22, 25], "json": [3, 4, 6, 11, 12, 13, 14, 16, 19, 21, 22, 30, 33], "mongodb": [3, 5, 6, 12, 14, 19, 20, 30], "like": [3, 6, 19, 25, 30], "credenti": [3, 4, 11, 12, 13, 16, 19, 21, 22, 25], "connect": [3, 8, 21], "databas": [3, 4, 5, 7, 9, 10, 12, 13, 14, 16, 19, 21, 22, 25, 26, 27, 30, 33], "calcul": [3, 4, 11, 12, 13, 14, 16, 19, 21, 22, 27, 30, 33], "output": [3, 4, 6, 11, 12, 13, 14, 16, 18, 19, 21, 23, 27, 30, 32, 33], "store": [3, 4, 7, 12, 13, 21, 22, 29, 30], "string": [3, 4, 12, 14, 16, 19, 21, 22, 24, 25], "doubl": [3, 14], "quot": 3, "except": [3, 16], "valu": [3, 11, 12, 14, 16, 21, 24, 25], "port": [3, 4, 11, 20], "integ": 3, "admin_us": 3, "admin_usernam": 3, "admin_password": 3, "alias": 3, "collect": [3, 6, 11, 12, 30], "db_name": 3, "host": [3, 4, 11, 20], "hostnam": 3, "my_fwork": [3, 14], "yaml": [3, 14], "": [3, 4, 6, 12, 14, 16, 21, 24], "In": [3, 4, 12, 18, 21, 22, 23, 30, 33], "simpl": [3, 4, 6], "workstat": 3, "launchpad": [3, 6, 7, 33], "complic": [3, 4], "supercomput": [3, 4, 27], "center": [3, 4], "queue": [3, 6, 14, 25, 33], "name": [3, 4, 6, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 30, 33], "worker_nam": 3, "categori": [3, 14], "queri": [3, 10, 11, 12, 14, 19, 20, 21, 33], "env": [3, 12, 18, 21, 23], "db_file": [3, 11, 20], "codes_dir": [3, 4, 5, 7], "config": [3, 12, 21], "scratch_dir": 3, "null": 3, "The": [3, 4, 5, 6, 8, 11, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25, 30, 32, 33], "paramet": [3, 4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 30, 32], "defin": [3, 11, 12, 13, 14, 16, 19, 20, 21, 22, 24, 25, 30], "worker": [3, 14], "job": [3, 6, 11, 12, 14, 16, 19, 27, 30, 33], "have": [3, 4, 5, 6, 12, 14, 19, 21, 24, 27], "multipl": [3, 6, 11, 12, 14, 16, 18, 19, 21, 23, 30], "see": [3, 4, 6, 12, 13, 14, 16, 19, 21, 22, 25], "control": [3, 7, 9, 14, 20, 21, 22, 27], "than": [3, 4, 14], "one": [3, 6, 11, 12, 14, 16, 19, 21, 24, 25, 30], "default": [3, 4, 9, 10, 12, 13, 14, 16, 19, 21, 22, 24, 25, 26], "allow": [3, 27], "all": [3, 4, 6, 7, 8, 12, 13, 14, 16, 18, 19, 21, 23, 24, 27, 30], "specif": [3, 4, 14, 19], "path": [3, 11, 12, 13, 14, 16, 19, 21, 22, 24, 25], "scratch": 3, "directori": [3, 4, 5, 6, 7, 10, 12, 13, 14, 16, 19, 21, 22, 24, 25, 33], "fast": [3, 11], "disk": 3, "access": [3, 4, 5], "my_launchpad": 3, "manag": [3, 4, 11, 27], "earlier": 3, "result": [3, 5, 11, 12, 14, 16, 21, 30, 33], "while": [3, 4, 14, 27, 30], "two": [3, 5, 12, 14, 16, 19, 21, 27], "same": [3, 4, 6, 12, 14, 16, 21], "differ": [3, 4, 5, 12, 14, 16, 22, 30], "thei": [3, 6, 12, 14, 16], "mostli": 3, "launchpad_nam": 3, "usernam": [3, 11, 20], "password": [3, 11, 20], "logdir": 3, "strm_lvl": 3, "info": [3, 6, 14, 19, 21, 25], "user_indic": 3, "wf_user_indic": 3, "authsourc": 3, "uri_mod": [3, 11, 20], "mongoclient_kwarg": 3, "server": [3, 4], "true": [3, 6, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 24, 25, 33], "should": [3, 4, 5, 6, 11, 12, 13, 14, 16, 19, 21, 22, 24], "full": [3, 12, 16, 21, 24, 30], "uri": 3, "case": [3, 4, 12, 14, 22], "pass": [3, 11, 12, 13, 14, 16, 19, 21, 22], "custom": [3, 21, 30, 32], "keyword": [3, 14, 16, 19, 25], "argument": [3, 14, 16, 19, 25, 33], "e": [3, 5, 7, 11, 12, 13, 14, 16, 19, 22, 24, 27, 30, 32], "g": [3, 7, 11, 12, 13, 14, 16, 19, 22, 24, 27, 30, 32], "ssl": 3, "tl": 3, "mongocli": [3, 4], "via": [3, 4, 5, 12, 16, 33], "pymongo": [3, 4, 11], "detail": [3, 4, 12, 13, 14, 19, 24], "my_qadapt": [3, 14], "adapt": [3, 25], "commun": [3, 30], "provid": [3, 4, 8, 12, 13, 14, 16, 18, 19, 21, 22, 23, 25, 30, 32, 33], "slurm": 3, "machin": [3, 4, 6, 14], "doe": [3, 16], "list": [3, 4, 7, 11, 12, 13, 14, 16, 19, 21, 22, 24, 25, 33], "possibl": [3, 12], "check": [3, 4, 6, 12, 14, 16, 24], "rest": 3, "specifi": [3, 6, 10, 12, 13, 14, 16, 18, 19, 21, 23, 24], "pb": 3, "sge": 3, "etc": [3, 7, 11, 12, 14, 16, 19, 22, 27, 30, 32], "_fw_name": 3, "commonadapt": 3, "_fw_q_type": 3, "rocket_launch": 3, "rlaunch": [3, 6], "w": [3, 24], "singleshot": [3, 6], "node": [3, 12, 14, 15, 16, 21], "walltim": [3, 14, 25], "24": [3, 16, 19], "00": [3, 25], "account": [3, 4, 14], "job_nam": [3, 25], "pre_rocket": [3, 14], "post_rocket": 3, "log": [3, 21, 24], "mean": [3, 12, 21], "built": [3, 27], "method": [3, 12, 16, 18, 20, 21, 23, 24, 25], "launch": [3, 6, 33], "rocket": [3, 14], "normal": [3, 12, 14, 16], "script": [3, 4, 21, 30, 33], "alloc": 3, "resourc": [3, 12, 14, 18, 21, 23, 27, 30], "command": [3, 4, 5, 6, 12, 14, 18, 19, 21, 22, 23, 24, 33], "modul": [3, 4, 26], "load": [3, 4, 33], "limit": [3, 4, 8, 12], "each": [3, 12, 13, 14, 16, 19, 21, 22, 25, 30], "reserv": 3, "even": 3, "wait": [3, 7], "rapidfir": [3, 6, 33], "parallel": [3, 16, 27, 30], "go": [3, 4, 5], "over": [3, 14], "between": [3, 12, 13, 14, 16, 25, 27, 30], "mode": [3, 6], "ini": [3, 21], "gaussian": [3, 4, 6, 9, 19, 21, 22, 25, 26, 27, 29, 30, 32, 33], "ambertool": [3, 4, 21, 22], "These": [3, 4, 16, 19], "meant": [3, 14, 16], "show": [3, 6, 29, 30, 33], "match": [3, 11, 13, 14, 16, 19, 21, 22, 25, 27], "runcalc": 3, "gcmd": 3, "g16": 3, "input_path": 3, "output_path": 3, "formchkcmd": 3, "formchk": 3, "lammpsruncalc": 3, "lcmd": 3, "mpirun": 3, "np": [3, 19, 24], "slurm_ntask": 3, "lmp_mpi": 3, "control_path": 3, "lammps_gpu_cmd": 3, "ambertoolsruncalc": 3, "acmd": 3, "antechamb": [3, 9, 20, 21], "input_fil": [3, 12, 13, 14, 21, 24], "fi": 3, "input_typ": 3, "o": [3, 4, 12, 16, 33], "output_fil": [3, 12, 13], "fo": 3, "output_typ": 3, "c": [3, 4, 8, 24, 33], "charge_method": [3, 21], "pcmd": 3, "parmchk2": 3, "f": [3, 33], "mol2": [3, 12, 21], "tcmd": 3, "tleap": [3, 9, 20, 21], "maestrocalc": 3, "mae_cmd": [3, 21, 24], "schroding": [3, 21, 24], "util": [3, 6, 9, 11, 12, 13, 16, 20, 21, 22, 25, 33], "structconvert": [3, 21], "ffld_cmd": [3, 21, 24], "ffld_server": [3, 21], "ima": 3, "version": [3, 4, 24, 30], "14": [3, 33], "print_paramet": 3, "out_fil": 3, "convert": [3, 10, 12, 14, 16, 24], "checkpoint": [3, 12, 16, 19], "format": [3, 4, 10, 12, 14, 16, 19, 21, 24], "gpu": 3, "anyth": 3, "dollar": 3, "sign": 3, "placehold": 3, "variabl": [3, 12, 18, 21, 23, 24], "squar": [3, 21], "bracket": 3, "colon": 3, "gmcd": 3, "sinc": [3, 6, 12, 14, 16, 19], "point": [3, 5, 6, 33], "fw_config": 3, "master": [3, 12, 18, 21, 23], "locat": [3, 14, 24], "config_file_dir": 3, "expect": [3, 12, 16], "modifi": [3, 5, 8, 14], "fw": [3, 13], "abov": [3, 6, 8, 12, 16, 19, 30, 32, 33], "six": 3, "replac": [3, 6, 14, 24], "definit": [3, 4, 7, 19, 25], "call": [3, 6, 12, 18, 21, 23, 30], "look": 3, "now": [3, 5, 6], "append": [3, 12, 14, 21], "line": 3, "bash_profil": 3, "bashrc": 3, "order": [3, 4, 5, 12, 14, 16, 19, 21, 30], "tell": 3, "turn": 3, "export": [3, 24], "fw_config_fil": 3, "third": 4, "parti": 4, "usual": [4, 12, 14], "those": [4, 14], "interfer": 4, "cluster": [4, 12, 19, 21, 25], "strongli": 4, "recommend": [4, 5], "isol": 4, "describ": [4, 24], "tool": 4, "3": [4, 6, 11, 12, 14, 16, 19, 25, 33], "10": [4, 25, 33], "higher": [4, 12], "extens": [4, 27], "ensur": [4, 5, 16, 21], "anaconda": 4, "miniconda": 4, "most": [4, 5, 6], "hpc": 4, "loadabl": 4, "yourself": 4, "offici": 4, "To": [4, 5, 6, 24], "activ": [4, 5, 6], "virtual": [4, 5, 7], "n": [4, 6, 12, 16], "mispr_env": 4, "prompt": 4, "front": 4, "indic": [4, 12, 16], "insid": [4, 16, 33], "program": [4, 21, 24], "deactiv": 4, "enviorn": 4, "simpli": [4, 5], "mai": [4, 12, 18, 21, 23], "setuptool": 4, "user": [4, 5, 12, 14, 16, 19, 21, 30], "old": 4, "At": [4, 30], "licens": 4, "purpos": [4, 8, 14], "commerci": 4, "perform": [4, 6, 7, 12, 13, 14, 16, 18, 19, 21, 22, 23, 25, 27, 30, 33], "ambertools24": 4, "open": [4, 12, 13, 16, 27, 33], "sourc": [4, 5, 10, 11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27], "gener": [4, 6, 12, 13, 14, 16, 21, 22, 24, 25, 27, 30, 32], "gaff": [4, 14, 21, 22, 32], "direct": [4, 12, 16, 30], "packmol": [4, 21], "build": [4, 11, 12, 14, 21, 30, 32], "schr\u00f6dinger": 4, "academ": 4, "avail": [4, 12, 16, 25, 32], "opls2005": 4, "execut": [4, 5, 6, 12, 30], "alreadi": [4, 5, 11, 12, 13, 16, 21, 33], "typic": 4, "correspond": [4, 12, 14, 16, 19, 21, 30, 33], "pymatgen": [4, 10, 11, 12, 14, 16, 19, 21, 25, 27, 29], "handl": [4, 12, 14, 20], "represent": [4, 6, 11, 14, 19], "oper": [4, 12, 13, 14, 16, 19, 22, 25, 30, 33], "made": 4, "make": [4, 5, 6, 12, 19], "compat": [4, 24], "our": 4, "been": [4, 27], "merg": [4, 8], "yet": 4, "main": [4, 7, 16, 19], "therefor": [4, 6], "molmd": [4, 5], "pip3": 4, "git": [4, 5], "http": [4, 5, 14, 21, 24], "com": [4, 5, 12, 13, 14, 21, 24], "molmd_fix_3": 4, "9": [4, 33], "egg": 4, "design": [4, 27], "further": [4, 5], "found": [4, 16, 19], "due": 4, "mani": [4, 6, 14, 27], "advantag": 4, "take": [4, 5, 12, 18, 21, 23], "some": [4, 5, 12, 18, 21, 23, 30, 32], "custodian": [4, 12, 27, 29], "error": [4, 5, 12, 16, 27], "occur": [4, 27], "dure": [4, 16, 27, 33], "correct": [4, 5, 12, 24, 27, 30], "accord": [4, 33], "predefin": 4, "rule": 4, "contribut": 4, "plug": 4, "openbabel": [4, 12, 14, 16], "interfac": 4, "forg": 4, "standalon": 4, "develop": [4, 27], "analyz": [4, 27, 30], "don": 4, "separ": [4, 21], "nosql": 4, "highli": 4, "effici": 4, "scalabl": 4, "manner": [4, 29], "It": [4, 6, 7, 12, 18, 21, 23, 30], "repres": [4, 16, 27, 30], "javascript": 4, "object": [4, 10, 11, 12, 14, 16, 19, 20, 21, 24, 25, 30], "notat": 4, "similar": 4, "dictionari": [4, 6, 11, 12, 13, 14, 16, 19, 21, 22, 24, 25], "remov": [4, 10, 14, 24], "search": [4, 10, 14, 19, 22, 33], "statu": [4, 6, 7], "local": [4, 6, 12, 13, 14, 16], "pretti": 4, "well": [4, 6, 16, 27, 33], "out": [4, 8, 12, 13, 18, 21, 23], "howev": [4, 30], "storag": 4, "space": [4, 27], "share": [4, 21], "also": [4, 6, 12, 30, 33], "necessari": [4, 25], "privileg": 4, "mongo": 4, "servic": 4, "simplest": 4, "easiest": 4, "free": [4, 8, 12, 16, 24], "larg": [4, 27, 33], "size": [4, 19, 25], "atla": 4, "offer": 4, "500": [4, 25], "mb": 4, "enough": 4, "small": 4, "project": [4, 27], "self": 4, "ask": 4, "continu": 4, "mainten": 4, "keep": [4, 14], "record": 4, "later": [4, 5, 6], "must": [4, 6, 19, 21, 25], "establish": [4, 27], "instanc": [4, 14], "client": 4, "localhost": 4, "27017": 4, "re": 4, "print": [4, 33], "list_database_nam": 4, "success": [4, 27], "return": [4, 6, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "present": [4, 16, 21], "rememb": 4, "appropri": 4, "below": [5, 30], "conda": 5, "sure": [5, 6], "chemistri": [5, 27], "test": [5, 9, 14, 20, 27], "throughout": 5, "assum": [5, 6, 16], "familiar": 5, "linux": 5, "shell": [5, 30], "journei": 5, "beginn": 5, "either": [5, 12, 21], "index": [5, 11, 12, 14, 16, 19, 20], "good": [5, 12, 13], "repositori": 5, "pypi": 5, "who": 5, "had": 5, "uninstal": 5, "conflict": 5, "cd": 5, "newli": 5, "clone": 5, "equival": 5, "onc": [5, 6, 30, 33], "effect": 5, "immedi": 5, "without": [5, 8, 14], "reinstal": 5, "confirm": [5, 23], "ipython": 5, "termin": [5, 6, 14], "import": [5, 6, 12, 33], "updat": [5, 11, 12, 21], "upgrad": 5, "everyth": 6, "correctli": 6, "veri": 6, "optim": [6, 12, 13, 14, 16, 19, 27, 32, 33], "structur": [6, 12, 13, 14, 16, 19, 21, 24, 27, 29, 30, 32, 33], "lpad": [6, 33], "qlaunch": [6, 33], "part": 6, "reset": 6, "eras": 6, "exist": [6, 11, 12, 14, 16], "entri": [6, 14], "y": [6, 24], "08": [6, 25], "15": [6, 25, 33], "17": 6, "04": 6, "42": 6, "224": 6, "tune": 6, "683": 6, "wa": 6, "next": 6, "geometri": [6, 12, 16, 33], "monoglym": [6, 33], "xyz": [6, 12, 14, 19], "optimize_geometri": 6, "py": [6, 12, 13, 16, 19, 21, 22, 25, 33], "core": [6, 9, 10, 11, 15, 17, 20, 24, 25, 32], "calcfrommolfw": [6, 11, 13], "auto_load": [6, 33], "wf": [6, 33], "get_from_fil": [6, 14, 16, 19, 22], "gaussian_input_param": [6, 12, 13], "route_paramet": [6, 16, 19], "opt": [6, 11, 12, 14, 16, 19, 24], "none": [6, 10, 11, 12, 13, 14, 16, 19, 20, 21, 22, 24, 25], "save_to_fil": [6, 10, 12, 33], "save_to_db": [6, 12, 33], "add_wf": [6, 33], "get_fw": 6, "readi": 6, "fw_id": 6, "created_on": 6, "16t20": 6, "32": 6, "54": 6, "554404": 6, "updated_on": 6, "554716": 6, "state": [6, 12, 13, 16, 19], "calc_from_mol": [6, 13], "altern": 6, "web": 6, "gui": 6, "webgui": 6, "through": [6, 12, 21, 24, 27, 33], "ha": [6, 21], "multi": [6, 12], "ll": 6, "flag": 6, "prevent": 6, "too": 6, "went": 6, "determin": [6, 21, 25], "fail": [6, 12, 16], "rerun": 6, "id": [6, 12, 14, 19], "rerun_fw": 6, "input": [6, 9, 11, 12, 13, 16, 19, 21, 22, 24, 25, 30, 32, 33], "summari": [6, 12, 16, 30], "addition": [6, 16], "inchi": [6, 11, 12, 14, 19, 30], "criteria": [6, 10, 11, 12, 14, 19, 33], "db_util": [6, 9, 11], "get_db": [6, 11, 14, 20, 24], "retrieve_run": [6, 9, 11, 20], "c4h10o2": [6, 33], "c1": 6, "5": [6, 11, 14, 16, 19, 33], "6": [6, 14, 16, 19, 33], "h3": 6, "4h2": 6, "2h3": 6, "save": [6, 10, 12, 14, 21, 22, 24, 25, 30], "view": 6, "compass": 6, "appear": [6, 14], "task": [7, 12, 13, 14, 18, 21, 22, 23, 27], "firetask": [7, 9, 11, 13, 14, 16, 17, 20, 22, 23, 30], "A": [7, 8, 11, 12, 13, 14, 18, 21, 23, 24, 30], "sequenc": [7, 30], "under": [8, 28, 31, 33], "mit": 8, "copyright": 8, "stoni": 8, "brook": 8, "univers": 8, "permiss": 8, "herebi": 8, "grant": 8, "person": 8, "obtain": [8, 12, 21, 22, 25], "copi": [8, 12, 14], "associ": 8, "deal": 8, "restrict": 8, "right": 8, "distribut": [8, 21, 22, 27], "sublicens": 8, "sell": 8, "permit": 8, "whom": 8, "furnish": 8, "subject": 8, "condit": 8, "notic": 8, "shall": 8, "substanti": 8, "portion": 8, "THE": 8, "AS": 8, "warranti": 8, "OF": 8, "kind": 8, "express": 8, "OR": 8, "impli": 8, "BUT": 8, "NOT": 8, "TO": 8, "merchant": 8, "fit": [8, 33], "FOR": 8, "particular": 8, "AND": 8, "noninfring": 8, "IN": 8, "NO": 8, "event": 8, "holder": 8, "BE": [8, 14, 16], "liabl": 8, "claim": 8, "damag": 8, "liabil": 8, "whether": [8, 10, 11, 12, 13, 14, 16, 21, 22, 24, 25], "action": 8, "contract": 8, "tort": 8, "otherwis": [8, 12, 14, 16, 19], "aris": 8, "WITH": 8, "common": [9, 13, 14, 16, 19, 22, 26, 33], "submodul": [9, 15, 26], "pubchemrunn": [9, 10], "cleanup": [9, 10, 14, 20, 24], "convert_sdf_to_mol": [9, 10], "download_sdf": [9, 10], "get_mol": [9, 10], "geo_transform": [9, 11, 13, 22], "parse_output": [9, 11, 13, 20, 22], "run_calc": [9, 11, 13], "write_input": [9, 11, 13, 20, 22], "break_mol": [9, 11], "dbdoc": [9, 11], "fw_util": [9, 11], "gout": [9, 11, 12], "metadata": [9, 11, 30], "misc": [9, 11], "mol": [9, 11, 12, 13, 16, 19, 21, 22, 25, 33], "rdkit": [9, 11, 16], "gaussiancalcdb": [9, 11, 14], "build_index": [9, 11, 20], "delete_molecul": [9, 11], "from_db_fil": [9, 11, 20], "insert_derived_mol": [9, 11], "insert_fg": [9, 11], "insert_molecul": [9, 11], "insert_properti": [9, 11], "insert_run": [9, 11, 20], "move_run": [9, 11], "query_molecul": [9, 11], "retrieve_doc": [9, 11], "retrieve_fg": [9, 11], "retrieve_molecul": [9, 11], "update_run": [9, 11], "nmr_from_md": [9, 17], "base_test": [9, 20], "custom_data_workflow": [9, 20], "electrolyte_wf": [9, 20], "esp_to_ff_dict_custom": [9, 20], "esp_to_ff_dict_funct": [9, 20], "liquid_wf_loc": [9, 20], "parmchk": [9, 20, 21], "prmtop": [9, 19, 20, 21, 22], "run_lammp": [9, 20, 22], "base": [9, 10, 11, 12, 13, 14, 15, 18, 19, 20, 21, 22, 23, 24, 27, 32, 33], "lammpssysdb": [9, 20], "delete_force_field": [9, 20], "insert_force_field": [9, 20], "insert_system": [9, 20], "query_force_field": [9, 20], "retrieve_force_field": [9, 20], "implement": [10, 24, 30], "class": [10, 11, 12, 13, 16, 18, 20, 21, 22, 23, 24], "abbrevi": [10, 14], "working_dir": [10, 12, 13, 14, 16, 19, 21, 22, 24, 25], "wrapper": [10, 14, 21, 24], "str": [10, 11, 12, 13, 14, 16, 19, 21, 22, 24, 25], "current": [10, 12, 13, 14, 16, 21, 22, 25, 33], "delet": [10, 11, 24, 30], "sdf": [10, 12], "fmt": [10, 12], "bool": [10, 11, 12, 13, 14, 16, 19, 21, 22, 24, 25], "identifi": [10, 12, 21], "pdb": [10, 12, 19], "intermedi": [10, 12, 24, 30], "attachfunctionalgroup": [11, 12], "run_task": [11, 12, 17, 18, 20, 21, 23], "breakmolecul": [11, 12, 13], "converttomoleculeobject": [11, 12], "linkmolecul": [11, 12], "processmoleculeinput": [11, 12, 13, 22], "retrievemoleculeobject": [11, 12], "bdetodb": [11, 12], "bindingenergytodb": [11, 12], "esptodb": [11, 12], "ipeatodb": [11, 12], "nmrtodb": [11, 12], "processrun": [11, 12, 13], "retrievegaussianoutput": [11, 12, 13], "rungaussiancustodian": [11, 12, 13, 14], "rungaussiandirect": [11, 12, 14], "rungaussianfak": [11, 12, 14], "writeinput": [11, 12, 13], "breakmolfw": [11, 13], "calcfromrunsdbfw": [11, 13], "common_task": [11, 13], "add_solvent_to_prop_dict": [11, 14], "bibtex_pars": [11, 12, 14], "recursive_relative_to_absolute_path": [11, 14], "add_common_mod": [11, 14], "control_work": [11, 14], "get_list_fireworks_and_task": [11, 14], "modify_queue_paramet": [11, 14], "replace_runtask": [11, 14], "run_fake_gaussian": [11, 14], "process_run": [11, 12, 14, 20, 24], "handle_gaussian_input": [11, 14], "get_chem_schema": [11, 14], "get_job_nam": [11, 14], "get_mol_formula": [11, 14], "pass_gout_dict": [11, 14], "recursive_compare_dict": [11, 14], "recursive_signature_remov": [11, 14], "get_bond_order_str": [11, 14], "label_atom": [11, 14], "perform_local_opt": [11, 14], "process_mol": [11, 12, 13, 14, 16, 22, 25, 33], "calc_energi": [11, 14], "draw_rdkit_mol": [11, 14], "draw_rdkit_mol_with_highlighted_bond": [11, 14], "get_rdkit_mol": [11, 14], "bde": [11, 12, 14, 15, 30], "binding_energi": [11, 12, 15], "esp": [11, 12, 15, 19, 21, 22, 30, 32], "ip_ea": [11, 12, 15], "fals": [11, 12, 13, 14, 16, 20, 21, 22, 25], "kwarg": [11, 12, 13, 14, 16, 18, 19, 20, 21, 22, 23, 24, 25], "insert": [11, 12], "abstract": [11, 12, 18, 20, 21, 23], "background": [11, 20], "classmethod": [11, 20], "admin": [11, 20], "derived_mol": 11, "update_dupl": [11, 12, 20], "deriv": [11, 12, 14, 19, 27, 30, 32], "derived_molecul": 11, "duplic": 11, "fg_file": 11, "collection_nam": 11, "property_dict": 11, "dict": [11, 12, 13, 14, 16, 18, 19, 21, 22, 23, 24, 25], "tupl": [11, 12, 13, 14, 16, 25], "lookup": 11, "create_index": 11, "grun": 11, "new_collect": 11, "smile": [11, 14, 20, 24, 30], "basi": [11, 12, 14], "anoth": [11, 12], "select": [11, 33], "kei": [11, 12, 14, 16, 18, 21, 23, 24, 25], "chemsi": 11, "datafram": 11, "pd": 11, "functional_group": 11, "new_valu": 11, "job_typ": [11, 12], "phase": [11, 12, 14, 16], "block": [11, 30, 32], "polariz": 11, "freq": [11, 12, 14, 16, 19], "ga": [11, 12, 14, 16], "variou": [12, 27, 29, 30], "transform": 12, "arg": [12, 18, 21, 23], "firetaskbas": [12, 18, 21, 23], "attach": [12, 14, 16, 19], "fw_spec": [12, 14, 18, 21, 23], "func_grp": [12, 14, 19], "carboxyl": 12, "int": [12, 13, 14, 16, 19, 21, 25], "site": [12, 14, 16, 19], "taken": 12, "previou": [12, 13, 14, 21], "prioriti": 12, "given": [12, 14, 30], "latter": 12, "bond_ord": [12, 14, 16, 19], "bond": [12, 13, 14, 16, 19, 22, 24, 27, 30, 32], "length": [12, 16, 19, 27], "save_mol_fil": 12, "filenam": [12, 14, 22, 25], "formula": [12, 14, 16, 21, 22, 30], "spec": [12, 14, 18, 21, 23, 25], "fwaction": [12, 18, 21, 23], "come": [12, 18, 21, 23], "special": [12, 18, 21, 23], "_fw_env": [12, 18, 21, 23], "fworker": [12, 14, 18, 21, 23], "certain": [12, 14, 18, 21, 23, 33], "foo": [12, 18, 21, 23], "foo1": [12, 18, 21, 23], "foo2": [12, 18, 21, 23], "map": [12, 18, 21, 23, 24], "relev": [12, 16, 18, 19, 21, 23, 30], "write": [12, 13, 16, 18, 19, 21, 23, 25, 30], "across": [12, 18, 21, 23], "break": [12, 13, 16], "uniqu": [12, 13, 14, 16, 21, 22, 24], "fragment": [12, 13, 16], "term": 12, "assign": [12, 13, 14, 16, 24], "frequenc": [12, 13, 14, 16, 19, 33], "credit": 12, "samuel": 12, "blau": 12, "atom": [12, 13, 14, 16, 19, 21, 24, 27, 30, 33], "attempt": [12, 13, 16, 19, 21, 22, 25], "ref_charg": [12, 13, 16], "principl": [12, 13, 16, 27], "fragment_charg": [12, 13, 16], "ones": [12, 13, 14, 16], "neutral": [12, 16], "open_r": [12, 13, 16], "ring": [12, 13, 16], "guess": [12, 13], "opt_step": 12, "10000": 12, "opt_gaussian_input": [12, 14, 16, 19], "calc_frag": [12, 13], "freq_gaussian_input": [12, 14, 16, 19], "cart_coord": [12, 13, 16, 19], "cartesian": [12, 13, 16, 19], "coordin": [12, 13, 16, 19, 21, 32], "oxidation_st": [12, 13, 16, 19], "oxid": [12, 13, 16, 19], "spin": [12, 16, 19], "li": [12, 16], "children": [12, 16], "read": [12, 14, 21, 22, 25, 33], "mol_fil": 12, "mdl": 12, "sd": 12, "ml2": 12, "sy2": 12, "cml": 12, "mrv": 12, "gjf": 12, "g03": 12, "g09": 12, "inp": 12, "serial": 12, "process": [12, 13, 14, 16, 19, 21, 22, 24, 25, 30, 33], "link": [12, 14, 16, 19, 25, 30], "second": [12, 14, 16], "index1": 12, "index2": 12, "mol1": [12, 14, 19], "gaussianoutput": [12, 13, 14, 16, 19, 22, 25], "operation_typ": [12, 14, 19, 22], "besid": [12, 16, 30], "could": [12, 13, 16, 19, 22, 25], "from_fw_spec": 12, "local_opt": [12, 14], "force_field": [12, 14], "forc": [12, 14, 19, 21, 22, 24, 25, 27, 32, 33], "field": [12, 14, 19, 21, 22, 24, 25, 27, 32], "str_type": [12, 14], "get_from_str": [12, 14, 19], "smi": [12, 14], "pars": [12, 13, 14, 21, 24, 27, 30], "enter": 12, "dissoci": [12, 16, 27, 30, 32], "energi": [12, 14, 16, 27, 30, 32], "principle_mol_kei": 12, "solvent_gaussian_input": [12, 14, 16, 19], "implicit": [12, 14, 16, 19], "solvent": [12, 14, 16, 19, 25], "model": [12, 14, 16, 19, 24, 30], "solvent_properti": [12, 14, 16, 19], "final": [12, 14, 16, 19, 30], "additional_prop_doc_field": [12, 33], "visual": [12, 14, 16], "bar": [12, 16], "plot": [12, 16, 30], "along": [12, 16], "2d": [12, 14, 16], "highlight": [12, 14, 16], "broken": [12, 16], "color": [12, 14, 16], "rgb": [12, 14], "black": [12, 14], "197": 12, "255": 12, "237": 12, "223": 12, "bind": [12, 16, 27, 32], "ev": [12, 16], "lead": [12, 30], "redox": [12, 16, 27, 32], "potenti": [12, 16, 27, 32, 33], "both": [12, 16, 21], "gibb": [12, 16], "num_electron": [12, 16], "electron": [12, 16, 27], "transfer": [12, 16, 30], "cation": [12, 16], "anion": [12, 16], "reduct": [12, 16], "involv": [12, 16], "thermodynam": [12, 16], "cycl": [12, 16], "singl": [12, 16, 21, 27, 30], "root_node_kei": 12, "root": 12, "pcet": [12, 16], "vertic": [12, 16], "ip": [12, 16], "ea": [12, 16], "electrode_potenti": [12, 16], "electrod": [12, 16], "absolut": [12, 14, 16], "commonli": [12, 16], "hydrogen": [12, 14, 16], "lithium": [12, 16], "magnesium": [12, 16], "metal": 12, "float": [12, 14, 16, 19, 21, 24, 25], "ref": [12, 16], "ref_bib_fil": 12, "dir": 12, "bibtexpars": 12, "gibbs_elec": [12, 16], "hartre": [12, 16], "gibbs_h": [12, 16], "actual": [12, 14], "itself": [12, 14], "input_paramet": [12, 14], "end": [12, 14, 24, 30], "easili": [12, 14], "gout_kei": [12, 16], "mod_spec": 12, "format_chk": [12, 33], "formchk_cmd": 12, "gaussianinput": 12, "run_id": 12, "5e3737d9da0b1cbbd5d556f7": [12, 14], "tag": [12, 13, 22, 25, 33], "gaussian_cmd": 12, "stderr_fil": 12, "standard": [12, 25], "better_guess": 12, "backup": 12, "orig": 12, "scf_max_cycl": 12, "maximum": [12, 14], "scf": 12, "100": 12, "opt_max_cycl": 12, "max_error": 12, "give": 12, "lower_funct": 12, "lower": 12, "level": [12, 14], "better": 12, "again": 12, "lower_basis_set": 12, "less": [12, 14], "expens": 12, "prefix": 12, "seri": 12, "tar": 12, "gz": 12, "suffix": 12, "renam": 12, "check_converg": 12, "converg": [12, 33], "iter": [12, 14], "wall_tim": 12, "wall": [12, 30], "walltimeerrorhandl": 12, "restart": [12, 25], "hit": 12, "buffer_tim": 12, "buffer": 12, "remain": 12, "cancel": 12, "becaus": 12, "own": [12, 32], "longer": 12, "300": 12, "max_wall_time_correct": 12, "fake": [12, 14, 21], "ref_dir": [12, 14, 21, 24], "folder": 12, "toler": [12, 14], "comparison": [12, 14], "0001": 12, "gaussian_input": [12, 14, 16, 19], "written": [12, 13, 21, 25], "graph": [12, 30], "isomorph": 12, "ignor": [12, 16, 21], "symbol": [12, 13], "mol_operation_typ": [13, 14, 16, 19, 22, 33], "get_from_mol": [13, 14, 16, 19], "parent": [13, 16, 22], "unknown": [13, 22, 25], "easi": [13, 14, 22], "__init__": [13, 22], "z": [13, 16, 19], "matrix": [13, 16, 19], "calc_from_runs_db": 13, "input_db": [14, 24], "helper": [14, 22], "clean": [14, 21, 24], "prop_dict": 14, "tetrahydrofuran": [14, 16, 19], "ep": [14, 16, 19], "12": [14, 16, 19, 25, 33], "bib_fil": 14, "rel": [14, 16], "els": 14, "operand": 14, "recurs": 14, "powerup": 14, "fw_mod": 14, "modif": 14, "appli": [14, 16, 24], "docstr": 14, "firework_substr": 14, "task_substr": 14, "substr": 14, "exclud": 14, "consist": [14, 16, 30], "firework_index": 14, "task_index": 14, "ntasks_per_nod": 14, "other_paramet": 14, "cpu": 14, "memori": 14, "partit": 14, "pre": 14, "queueadapt": 14, "remove_custodian": 14, "additional_param": 14, "rungaussian": 14, "vice": 14, "versa": 14, "use_custodian": 14, "origin": 14, "home": 14, "get_from_gout": [14, 19], "io": [14, 19, 21, 25], "get_from_gout_fil": [14, 19], "get_from_run_dict": [14, 19], "get_from_run_id": [14, 19], "dtabas": 14, "get_from_run_queri": [14, 19], "coccoc": 14, "b3lyp": [14, 16, 19], "31": 14, "miss": 14, "33": 14, "epsinf": 14, "69": 14, "reformat": 14, "schema": 14, "label": [14, 16, 19, 21, 22, 24, 25], "monitor": 14, "alphabet": 14, "miscellan": 14, "met": 14, "lack": 14, "imaginari": 14, "dict1": 14, "dict2": 14, "dict1_nam": 14, "dict2_nam": 14, "compar": 14, "messag": 14, "intern": 14, "nest": 14, "top": [14, 27], "d": [14, 16, 19, 24], "signatur": 14, "unspecifi": 14, "tripl": 14, "aromat": 14, "know": 14, "uff": 14, "200": 14, "ghemic": 14, "mmff94": 14, "openabel": [14, 19], "get_from_mol_db": [14, 19], "func": [14, 19], "get_from_pubchem": [14, 19, 33], "derive_molecul": [14, 19], "base_mol": [14, 19], "func_group_nam": [14, 19], "link_molecul": [14, 19], "mol_inchi": [14, 19], "rdkit_mol": 14, "maxit": 14, "png": [14, 33], "draw": 14, "imag": 14, "11": [14, 33], "13": [14, 33], "randomli": 14, "sanit": 14, "remove_h": 14, "rdmol": 14, "convers": 14, "org": [14, 21], "get_bd": [15, 16], "get_binding_energi": [15, 16], "gouttypeerror": [15, 16], "common_fw": [15, 16], "get_esp_charg": [15, 16, 33], "branch": [15, 16], "create_firework": [15, 16], "get_ip_ea": [15, 16], "get_nmr_tensor": [15, 16], "bde_calcul": 16, "skip": [16, 19, 32, 33], "being": [16, 24], "proce": 16, "caus": 16, "encount": 16, "basis_set": [16, 19], "31g": [16, 19], "link0_paramet": [16, 19], "chk": [16, 19], "mem": [16, 19], "45gb": [16, 19], "nprocshar": [16, 19], "applic": [16, 27], "throw": 16, "warn": 16, "binding_energy_calcul": 16, "7": [16, 33], "msg": 16, "thrown": 16, "process_mol_func": 16, "mol_nam": 16, "dir_head": 16, "check_result": 16, "differenti": 16, "head": 16, "vari": 16, "electrostat": [16, 30, 32, 33], "partial": [16, 21, 30, 32, 33], "esp_charges_calcul": 16, "esp_gaussian_input": [16, 19], "h2o": 16, "water": 16, "branch_cation_from_anion": 16, "h_index": 16, "tree": 16, "leaf": 16, "last": [16, 30], "Not": 16, "instanti": [16, 21], "child": 16, "final_energi": 16, "branching_st": 16, "branching_phas": 16, "num_of_electron": 16, "single_step": 16, "001378786": 16, "41816": 16, "ip_ea_calcul": 16, "ref_skip": 16, "ioniz": 16, "affin": 16, "adiabat": 16, "sequenti": [16, 30], "therebi": [16, 32], "proton": 16, "coupl": [16, 27], "equal": 16, "40": 16, "lib_pot": 16, "bib": 16, "overwrit": 16, "three": 16, "nuclear": [16, 19, 27], "magnet": [16, 19, 27], "reson": [16, 19, 27], "nmr_tensor_calcul": 16, "nmr_gaussian_input": [16, 19], "tensor": [16, 27], "nmrfrommd": [17, 18], "run_hybrid_calc": [17, 19], "get_solvation_structures_nmr": [17, 19], "mol_typ": 19, "mol_data": 19, "box_data": [19, 25], "ff_method": 19, "ff_param": 19, "mixture_typ": 19, "hybrid_calcul": 19, "box_data_typ": [19, 25], "cubic": [19, 21, 25], "data_file_nam": [19, 25], "mixtur": [19, 25, 32], "analysis_list": [19, 21, 25], "analysis_set": [19, 25], "extract": [19, 21, 27, 32], "solvat": [19, 27, 29, 32], "opt_esp_gaussian_input": 19, "freq_esp_gaussian_input": 19, "opt_nmr_gaussian_input": 19, "freq_nmr_gaussian_input": 19, "esp_solvent_gaussian_input": 19, "esp_solvent_properti": 19, "nmr_solvent_gaussian_input": 19, "nmr_solvent_properti": 19, "categor": 19, "around": 19, "particl": [19, 21], "interest": [19, 30], "highest": 19, "occurr": 19, "compos": 19, "concentr": [19, 21, 25, 27], "molar": 19, "molarity_i": 19, "molarity_f": 19, "weight": 19, "molar_weight": 19, "arrai": [19, 24, 25], "lammpsbox": [19, 25], "box": [19, 21, 24, 25], "get_from_esp": [19, 22], "get_from_prmtop": [19, 22], "get_from_dict": [19, 22], "get_from_opl": [19, 22], "what": 19, "empti": [19, 21, 22], "detect": [19, 27], "begin": 19, "mg": 19, "mass": [19, 21, 22, 24], "ordereddict": [19, 24], "305": 19, "nonbond": [19, 22, 24], "8947000005260684": 19, "412252647723565": 19, "angl": [19, 22, 24], "dihedr": [19, 22, 24], "improp": [19, 22, 24], "topologi": [19, 22, 24], "asarrai": 19, "sictionari": 19, "optioanl": 19, "rectangular": [19, 25], "finish": 19, "diffus": [19, 21, 22, 25, 27, 32], "rdf": [19, 21, 22, 25, 32], "cn": [19, 21, 25], "recip": [19, 25, 30], "recipe_set": [19, 25], "calccn": [20, 21], "calcdiff": [20, 21, 22], "extractclust": [20, 21], "getrdf": [20, 21, 22], "processanalysi": [20, 21], "processprmtop": [20, 21, 22, 23], "runantechamb": [20, 21, 22], "runlammpsdirect": [20, 21, 22], "runlammpsfak": [20, 21], "runmaestro": [20, 21, 22], "runparmchk": [20, 21, 22], "runtleap": [20, 21, 22], "labelffdict": [20, 21, 22], "labelffdictfromdb": [20, 21, 22], "writecontrolfil": [20, 21, 22], "writedatafil": [20, 21], "writetleapscript": [20, 21, 22], "getffdictfw": [20, 22, 25], "runanalysisfw": [20, 22], "runlammpsfw": [20, 22], "ambertools_task": [20, 22], "printfw": [20, 23], "maestrorunn": [20, 21, 24], "convert_ff_log_to_json": [20, 24], "convert_mol_to_ma": [20, 24], "get_ff_log": [20, 24], "get_opls_param": [20, 24], "add_ff_labels_to_badi_list": [20, 24], "add_ff_labels_to_dict": [20, 24], "lammps_mass_to_el": [20, 24], "process_ff_doc": [20, 24], "run_fake_lammp": [20, 24], "lammps_analysis_fw": [20, 25], "lammps_data_fw": [20, 25], "lammps_run_fw": [20, 25], "lammps_workflow": [20, 25], "interact": [20, 27], "doi": [20, 21, 24], "parameter_dict": [20, 24], "lmp_run": 20, "sys_doc": 20, "_id": 20, "cn_set": 21, "calc_atomic_cn": 21, "calc_molecular_cn": 21, "rdf_cn": 21, "coeffici": [21, 22, 27, 32], "displac": [21, 33], "msd": 21, "einstein": 21, "relat": [21, 27], "diff_set": 21, "might": 21, "timestep": 21, "unit": [21, 24], "msd_method": 21, "from_dump": 21, "from_log": 21, "num_mol": 21, "num_atoms_per_mol": 21, "file_pattern": 21, "pattern": 21, "nvt": [21, 25], "avg_interv": 21, "individu": [21, 27, 32], "averag": 21, "diff_dist": 21, "outputs_dir": 21, "cutoff": 21, "radiu": 21, "frame": 21, "cluster_set": 21, "get_clust": 21, "get_unique_configur": 21, "cluster_analysi": 21, "radial": [21, 22, 27], "rdf_set": 21, "calc_atomic_rdf": 21, "calc_molecular_rdf": 21, "save_analysis_to_db": 21, "save_analysis_to_fil": 21, "lammpsdatawrapp": [21, 25], "prmtop_path": 21, "try": [21, 24], "prmtop_filenam": 21, "prmtop_dir": 21, "unique_molecule_nam": 21, "system_force_field_dict": 21, "Will": 21, "digit": 21, "save_ff_to_db": [21, 22, 25], "save_ff_to_fil": [21, 22], "ff_filenam": [21, 22], "intent": 21, "ambermd": 21, "php": 21, "input_filename_a": 21, "input_file_typ": 21, "gesp": 21, "output_filename_a": 21, "output_file_typ": 21, "resp": 21, "antechamber_cmd": 21, "control_filenam": [21, 24], "lammpsin": 21, "lammps_cmd": 21, "net_ntask": 21, "processor": 21, "per": 21, "www": [21, 24], "maestro_cleanup": 21, "frcmod": 21, "input_filename_p": 21, "output_filename_p": 21, "parmchk_cmd": 21, "script_filenam": 21, "tleap_cmd": 21, "prev_calc_molecul": 21, "unlabeled_dict": 21, "ff_file": 21, "filter": [21, 22], "templat": [21, 25, 27], "calc": 21, "save_runs_to_db": [21, 25], "template_filenam": [21, 24, 25], "template_str": 21, "template_dir": 21, "control_set": [21, 24], "save_runs_to_fil": [21, 25], "lammpsin_kei": 21, "run_doc": 21, "bulk": 21, "lammpsdata": 21, "data_filenam": [21, 25], "lammps_data": 21, "lammps_data_wrapp": 21, "getforcefield": 21, "system_mixture_data": 21, "system_box_data": 21, "ndarrai": 21, "system_box_data_typ": 21, "position_se": 21, "seed": 21, "random": 21, "posit": 21, "indirectli": 21, "150": 21, "system_mixture_data_typ": 21, "scale_charg": 21, "non": 21, "zero": 21, "net": 21, "charge_scaling_factor": 21, "factor": 21, "inpcrd": 21, "script_str": 21, "gaff_tleap": 21, "tleap_set": 21, "get_ff_dict": 22, "pymatgen_molecul": 22, "atom_label": 22, "atomtype_mass": 22, "nonbond_param": 22, "bond_param": 22, "angle_param": 22, "dihedral_param": 22, "improper_param": 22, "improper_topologi": 22, "get_from_db": 22, "md_properti": 22, "run_analysi": 22, "control_fil": 22, "save_run_to_db": 22, "save_run_to_fil": 22, "modspec": 23, "opls_2005": 24, "schronding": 24, "bank": 24, "j": 24, "l": 24, "beard": 24, "h": [24, 33], "cao": 24, "cho": 24, "damm": 24, "farid": 24, "felt": 24, "k": 24, "halgren": 24, "mainz": 24, "mapl": 24, "murphi": 24, "philipp": 24, "repaski": 24, "p": 24, "zhang": 24, "bern": 24, "b": 24, "friesner": 24, "gallicchio": 24, "levi": 24, "integr": [24, 27], "impact": 24, "comp": 24, "chem": 24, "26": 24, "1752": 24, "mmshare": 24, "vversion": 24, "f14": 24, "freemaestro": 24, "suites2022": 24, "kb": 24, "1842": 24, "mae": 24, "1278": 24, "ff_list": 24, "extra": 24, "badi": 24, "ff_dict": 24, "coeff": 24, "pmg": 24, "x1": 24, "x2": 24, "x3": 24, "x4": 24, "lammps_mass": 24, "nmol": 24, "links_dict": 25, "system_species_data": 25, "system_mixture_typ": 25, "molecule_operation_typ": 25, "ff_param_method": 25, "ff_param_data": 25, "regard": 25, "mol_mixture_typ": 25, "mixture_data": 25, "emin": 25, "emin_gaff": 25, "npt": 25, "melt": 25, "quench": 25, "restart_finalnam": 25, "restart_filenam": 25, "restart_final_filenam": 25, "temperature_initi": 25, "temperature_fin": 25, "2000000": 25, "melt_500k": 25, "data_final_filenam": 25, "298": 25, "3000000": 25, "quench_298k": 25, "5000000": 25, "nvt_5n": 25, "recipe_qadapt": 25, "48": 25, "init_spec": 25, "lammps_recip": 25, "qadapter_run_lammps_spec": 25, "content": [26, 33], "informat": 27, "relationship": [27, 30], "aim": 27, "acceler": 27, "discoveri": 27, "deploy": 27, "seamlessli": 27, "techniqu": 27, "motiv": 27, "genom": 27, "mgi": 27, "hous": 27, "underli": 27, "submiss": 27, "analyt": 27, "creation": 27, "maintain": [27, 33], "proven": 27, "reproduc": 27, "inevit": 27, "fly": 27, "respons": 27, "reli": 27, "human": 27, "intuit": 27, "experi": 27, "significantli": 27, "improv": 27, "rate": 27, "elimin": 27, "intervent": 27, "flexibl": 27, "ensembl": 27, "viscos": 27, "conduct": 27, "critic": 27, "understand": 27, "inter": 27, "intra": 27, "biologi": 27, "seamless": 27, "enabl": 27, "flow": 27, "explor": 27, "wide": 27, "temperatur": 27, "pressur": 27, "infeas": 27, "experiment": 27, "challeng": 27, "manual": 27, "hundr": 27, "thousand": 27, "accur": 27, "crucial": 27, "reliabl": 27, "energet": 27, "primarili": 27, "construct": [28, 31, 33], "workshop": 29, "school": 29, "student": 29, "jupyt": 29, "notebook": 29, "sampl": 29, "fulli": 29, "scientif": 30, "descript": 30, "procedur": 30, "desir": 30, "rang": 30, "post": 30, "encod": 30, "acycl": 30, "chain": 30, "shown": 30, "goal": 30, "simplifi": 30, "report": 30, "took": 30, "summar": 30, "raw": 30, "diagram": [30, 33], "alwai": 30, "juli": 32, "compon": 32, "stabl": 32, "One": 32, "reus": 32, "merz": 33, "singh": 33, "kollman": 33, "scheme": 33, "mark": 33, "dash": 33, "border": 33, "_": 33, "mispr_tutori": 33, "esp_tutori": 33, "And": 33, "subdirectori": 33, "figur": 33, "cours": 33, "374646": 33, "373831": 33, "132166": 33, "132716": 33, "034284": 33, "031733": 33, "033853": 33, "8": 33, "034024": 33, "034218": 33, "034388": 33, "070724": 33, "03474": 33, "03438": 33, "034621": 33, "071656": 33, "16": 33, "034974": 33}, "objects": {"": [[9, 0, 0, 1, "mispr", ""]], "mispr": [[10, 0, 0, 1, "common", ""], [11, 0, 0, 1, "gaussian", ""], [17, 0, 0, 1, "hybrid", ""], [20, 0, 0, 1, "lammps", ""]], "mispr.common": [[10, 0, 0, 1, "pubchem", ""]], "mispr.common.pubchem": [[10, 1, 1, 0, "PubChemRunner", "Bases: object"]], "mispr.common.pubchem.PubChemRunner.__init__": [[10, 2, 2, 0, "abbreviation", "Abbreviation to be used when saving molecule file."], [10, 2, 2, 0, "working_dir", "Working directory for saving the molecule file in; will use the current working directory if not specified."]], "mispr.common.pubchem.PubChemRunner": [[10, 3, 1, 0, "cleanup", "Delete the sdf file downloaded from PubChem."], [10, 3, 1, 0, "convert_sdf_to_mol", "Convert an SDF file to a pymatgen Molecule object."], [10, 3, 1, 0, "download_sdf", "Download an SDF file from PubChem using a common name for the molecule as an identifier."], [10, 3, 1, 0, "get_mol", "Wrapper function that searches for a molecule in the PubChem database, downloads it in the form of an SDF file, and converts the file to a pymatgen Molecule object."]], "mispr.common.pubchem.PubChemRunner.convert_sdf_to_mol": [[10, 2, 2, 0, "fmt", "Molecule file format if save_to_file is True."], [10, 2, 2, 0, "save_to_file", "Whether to save the Molecule object to a file."]], "mispr.common.pubchem.PubChemRunner.download_sdf": [[10, 2, 2, 0, "name", "Name of the molecule to use for searching PubChem."]], "mispr.common.pubchem.PubChemRunner.get_mol": [[10, 2, 2, 0, "cleanup", "Whether to remove the intermediate sdf file."], [10, 2, 2, 0, "fmt", "Molecule file format if save_to_file is True; defaults to \"pdb\"."], [10, 2, 2, 0, "name", "Name of the molecule to use for searching PubChem."], [10, 2, 2, 0, "save_to_file", "Whether to save the Molecule object to a file. Defaults to True."]], "mispr.gaussian": [[11, 0, 0, 1, "database", ""], [11, 0, 0, 1, "defaults", ""], [12, 0, 0, 1, "firetasks", ""], [13, 0, 0, 1, "fireworks", ""], [14, 0, 0, 1, "utilities", ""], [15, 0, 0, 1, "workflows", ""]], "mispr.gaussian.database": [[11, 1, 1, 0, "GaussianCalcDb", "Bases: object"]], "mispr.gaussian.database.GaussianCalcDb": [[11, 3, 1, 0, "build_indexes", "Build indexes for the database."], [11, 3, 1, 0, "delete_molecule", "Delete a molecule from the molecules collection."], [11, 3, 1, 0, "from_db_file", "Create a new database object from a database file."], [11, 3, 1, 0, "insert_derived_mol", "Insert a derived molecule into the derived_molecules collection."], [11, 3, 1, 0, "insert_fg", "Insert functional groups into their collection using a json file. The file can contain one or more functional groups."], [11, 3, 1, 0, "insert_molecule", "Insert a molecule into the molecules collection."], [11, 3, 1, 0, "insert_property", "Insert a document into a property collection in the database."], [11, 3, 1, 0, "insert_run", "Insert a Gaussian run into the runs collection."], [11, 3, 1, 0, "move_runs", "Move documents from the runs collection to another collection."], [11, 3, 1, 0, "query_molecules", "Query the molecules collection."], [11, 3, 1, 0, "retrieve_doc", "Retrieve a document from any collection of the database."], [11, 3, 1, 0, "retrieve_fg", "Retrieve a functional group from the functional_groups collection."], [11, 3, 1, 0, "retrieve_molecule", "Retrieve a molecule from the molecules collection."], [11, 3, 1, 0, "retrieve_run", "Retrieve a run from the runs collection."], [11, 3, 1, 0, "update_run", "Update a document in the runs collection. If multiple documents match the query criteria, will select the first one."]], "mispr.gaussian.database.GaussianCalcDb.build_indexes": [[11, 2, 2, 0, "background", "If True, this index should be created."]], "mispr.gaussian.database.GaussianCalcDb.delete_molecule": [[11, 2, 2, 0, "inchi", "The inchi representation of the molecule to delete."]], "mispr.gaussian.database.GaussianCalcDb.from_db_file": [[11, 2, 2, 0, "admin", "Whether to use admin credentials; defaults to True."], [11, 2, 2, 0, "db_file", "The path to the database file."]], "mispr.gaussian.database.GaussianCalcDb.insert_derived_mol": [[11, 2, 2, 0, "derived_mol", "pymatgen.Molecule object."], [11, 2, 2, 0, "update_duplicates", "Whether to update duplicates if the molecule already exists."]], "mispr.gaussian.database.GaussianCalcDb.insert_fg": [[11, 2, 2, 0, "fg_file", "The path to the json file."]], "mispr.gaussian.database.GaussianCalcDb.insert_molecule": [[11, 2, 2, 0, "mol", "A pymatgen Molecule object to insert."], [11, 2, 2, 0, "update_duplicates", "If True, update the existing molecule in the db with the new one. Defaults to False."]], "mispr.gaussian.database.GaussianCalcDb.insert_property": [[11, 2, 2, 0, "collection_name", "The name of the collection to insert the property into; e.g. bde, binding_energy, etc."], [11, 2, 2, 0, "index", "The indexes to use for fast lookup."], [11, 2, 2, 0, "kwargs", "Additional kwargs to pass to pymongo.collection.create_index."], [11, 2, 2, 0, "property_dict", "The property dictionary to insert."]], "mispr.gaussian.database.GaussianCalcDb.insert_run": [[11, 2, 2, 0, "grun", "A dictionary containing the Gaussian run."]], "mispr.gaussian.database.GaussianCalcDb.move_runs": [[11, 2, 2, 0, "basis", "The name of the basis set."], [11, 2, 2, 0, "functional", "The name of the density functional."], [11, 2, 2, 0, "inchi", "The inchi representation of the molecule."], [11, 2, 2, 0, "kwargs", "Other kwargs that can be used to query the collection."], [11, 2, 2, 0, "new_collection", "The name of the collection to move the runs to."], [11, 2, 2, 0, "smiles", "The smiles representation of the molecule."]], "mispr.gaussian.database.GaussianCalcDb.query_molecules": [[11, 2, 2, 0, "query", "A query document that selects which documents to include in the result set; e.g. keys can be inchi, smiles, chemsys, etc."]], "mispr.gaussian.database.GaussianCalcDb.retrieve_doc": [[11, 2, 2, 0, "basis", "The name of the basis set."], [11, 2, 2, 0, "collection_name", "The name of the collection, e.g. bde, molecules, runs, etc."], [11, 2, 2, 0, "functional", "The name of the density functional."], [11, 2, 2, 0, "inchi", "The inchi representation of the molecule."], [11, 2, 2, 0, "kwargs", "Other kwargs that can be used to query the collection."], [11, 2, 2, 0, "smiles", "The smiles representation of the molecule."]], "mispr.gaussian.database.GaussianCalcDb.retrieve_fg": [[11, 2, 2, 0, "name", "The name of the functional group to retrieve."]], "mispr.gaussian.database.GaussianCalcDb.retrieve_molecule": [[11, 2, 2, 0, "inchi", "The inchi representation of the molecule."]], "mispr.gaussian.database.GaussianCalcDb.retrieve_run": [[11, 2, 2, 0, "basis", "The name of the basis set."], [11, 2, 2, 0, "functional", "The name of the density functional."], [11, 2, 2, 0, "inchi", "The inchi representation of the molecule."], [11, 2, 2, 0, "kwargs", "Other kwargs that can be used to query the collection."], [11, 2, 2, 0, "smiles", "The smiles representation of the molecule."]], "mispr.gaussian.database.GaussianCalcDb.update_run": [[11, 2, 2, 0, "basis", "The name of the basis set."], [11, 2, 2, 0, "functional", "The name of the density functional."], [11, 2, 2, 0, "inchi", "The inchi representation of the molecule."], [11, 2, 2, 0, "job_type", "The type of job, e.g. \"opt\", \"freq\"."], [11, 2, 2, 0, "kwargs", "Other kwargs that can be used to query the collection."], [11, 2, 2, 0, "new_values", "The new output values to update the document with, e.g."], [11, 2, 2, 0, "phase", "The phase of the job, e.g. \"gas\", \"solution\"."], [11, 2, 2, 0, "smiles", "The smiles representation of the molecule."]], "mispr.gaussian.firetasks": [[12, 0, 0, 1, "geo_transformation", ""], [12, 0, 0, 1, "parse_outputs", ""], [12, 0, 0, 1, "run_calc", ""], [12, 0, 0, 1, "write_inputs", ""]], "mispr.gaussian.firetasks.geo_transformation": [[12, 1, 1, 0, "AttachFunctionalGroup", "Bases: FiretaskBase"], [12, 1, 1, 0, "BreakMolecule", "Bases: FiretaskBase"], [12, 1, 1, 0, "ConvertToMoleculeObject", "Bases: FiretaskBase"], [12, 1, 1, 0, "LinkMolecules", "Bases: FiretaskBase"], [12, 1, 1, 0, "ProcessMoleculeInput", "Bases: FiretaskBase"], [12, 1, 1, 0, "RetrieveMoleculeObject", "Bases: FiretaskBase"]], "mispr.gaussian.firetasks.geo_transformation.AttachFunctionalGroup": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.geo_transformation.AttachFunctionalGroup.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.geo_transformation.BreakMolecule": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.geo_transformation.BreakMolecule.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.geo_transformation.ConvertToMoleculeObject": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.geo_transformation.ConvertToMoleculeObject.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.geo_transformation.LinkMolecules": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.geo_transformation.LinkMolecules.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.geo_transformation.ProcessMoleculeInput": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.geo_transformation.ProcessMoleculeInput.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.geo_transformation.RetrieveMoleculeObject": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.geo_transformation.RetrieveMoleculeObject.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.parse_outputs": [[12, 1, 1, 0, "BDEtoDB", "Bases: FiretaskBase"], [12, 1, 1, 0, "BindingEnergytoDB", "Bases: FiretaskBase"], [12, 1, 1, 0, "ESPtoDB", "Bases: FiretaskBase"], [12, 1, 1, 0, "IPEAtoDB", "Bases: FiretaskBase"], [12, 1, 1, 0, "NMRtoDB", "Bases: FiretaskBase"], [12, 1, 1, 0, "ProcessRun", "Bases: FiretaskBase"], [12, 1, 1, 0, "RetrieveGaussianOutput", "Bases: FiretaskBase"]], "mispr.gaussian.firetasks.parse_outputs.BDEtoDB": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.parse_outputs.BDEtoDB.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.parse_outputs.BindingEnergytoDB": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.parse_outputs.BindingEnergytoDB.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.parse_outputs.ESPtoDB": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.parse_outputs.ESPtoDB.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.parse_outputs.IPEAtoDB": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.parse_outputs.IPEAtoDB.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.parse_outputs.NMRtoDB": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.parse_outputs.NMRtoDB.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.parse_outputs.ProcessRun": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.parse_outputs.ProcessRun.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.parse_outputs.RetrieveGaussianOutput": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.parse_outputs.RetrieveGaussianOutput.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.run_calc": [[12, 1, 1, 0, "RunGaussianCustodian", "Bases: FiretaskBase"], [12, 1, 1, 0, "RunGaussianDirect", "Bases: FiretaskBase"], [12, 1, 1, 0, "RunGaussianFake", "Bases: FiretaskBase"]], "mispr.gaussian.firetasks.run_calc.RunGaussianCustodian": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.run_calc.RunGaussianCustodian.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.run_calc.RunGaussianDirect": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.run_calc.RunGaussianDirect.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.run_calc.RunGaussianFake": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.run_calc.RunGaussianFake.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.firetasks.write_inputs": [[12, 1, 1, 0, "WriteInput", "Bases: FiretaskBase"]], "mispr.gaussian.firetasks.write_inputs.WriteInput": [[12, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.gaussian.firetasks.write_inputs.WriteInput.run_task": [[12, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.gaussian.fireworks": [[13, 0, 0, 1, "break_mol", ""], [13, 0, 0, 1, "core", ""]], "mispr.gaussian.fireworks.break_mol": [[13, 1, 1, 0, "BreakMolFW", "Bases: Firework"]], "mispr.gaussian.fireworks.break_mol.BreakMolFW.__init__": [[13, 2, 2, 0, "bonds", "List of tuples of the bonds to break; e.g. [(0, 1), (1, 2)] will break the bonds between atoms 0 and 1 and between atoms 1 and 2; if none is specified, will attempt to break all bonds."], [13, 2, 2, 0, "calc_frags", "Whether to create optimization and frequency Fireworks for the generated fragments. Defaults to True."], [13, 2, 2, 0, "db", "Database credentials."], [13, 2, 2, 0, "fragment_charges", "List of charges to assign to the fragments in addition to the ones already assigned; refer to mispr.gaussian.firetasks.geo_transformation.BreakMolecule for more details."], [13, 2, 2, 0, "kwargs", "Other kwargs that are passed to:"], [13, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [13, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations. Defaults to get_from_mol."], [13, 2, 2, 0, "name", "Name of the Firework. Defaults to break_mol."], [13, 2, 2, 0, "open_rings", "Whether to open rings; if set to True, will perform local optimization to get a good initial guess for the structure. Defaults to False."], [13, 2, 2, 0, "parents", "List of parent FWs this FW depends on."], [13, 2, 2, 0, "ref_charge", "Charge on the principle molecule. Defaults to 0."], [13, 2, 2, 0, "tag", "Tag for the calculation; the provided tag will be stored in the db documents for easy retrieval. Defaults to \"unknown\"."], [13, 2, 2, 0, "working_dir", "Working directory for the calculation; will use the current working directory if not specified."]], "mispr.gaussian.fireworks.core": [[13, 1, 1, 0, "CalcFromMolFW", "Bases: Firework"], [13, 1, 1, 0, "CalcFromRunsDBFW", "Bases: Firework"], [13, 4, 1, 0, "common_tasks", "Define a list of common tasks for Gaussian fireworks, i.e. writing an input file, running the calculation, and parsing the output."]], "mispr.gaussian.fireworks.core.CalcFromMolFW.__init__": [[13, 2, 2, 0, "cart_coords", "Whether the coordinates are cartesian or z-matrix. Defaults to  True."], [13, 2, 2, 0, "db", "Database credentials; could be provided as the path to the db.json file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [13, 2, 2, 0, "gaussian_input_params", "Dictionary of parameters to be used in the Gaussian input file."], [13, 2, 2, 0, "input_file", "Name of the Gaussian input file to be created; defaults to \"mol.com\"."], [13, 2, 2, 0, "kwargs", "other kwargs that are passed to:"], [13, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [13, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations. Defaults to  get_from_mol."], [13, 2, 2, 0, "name", "Name of the Firework. Defaults to  calc_from_mol."], [13, 2, 2, 0, "output_file", "Name of the Gaussian output file to be output; defaults to \"mol.out\"."], [13, 2, 2, 0, "oxidation_states", "List of oxidation states for each atom; defaults to None."], [13, 2, 2, 0, "parents", "List of parent FWs this FW depends on."], [13, 2, 2, 0, "tag", "Tag for the calculation; the provided tag will be stored in the db documents for easy retrieval. Defaults to  \"unknown\"."], [13, 2, 2, 0, "working_dir", "Working directory for the calculation; defaults to the current directory."]], "mispr.gaussian.fireworks.core.CalcFromRunsDBFW.__init__": [[13, 2, 2, 0, "cart_coords", "Whether the coordinates are cartesian or z-matrix. Defaults to  True."], [13, 2, 2, 0, "db", "Database credentials; could be provided as the path to the db.json file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [13, 2, 2, 0, "gaussian_input_params", "Dictionary of parameters to be used in the Gaussian input file."], [13, 2, 2, 0, "input_file", "Name of the Gaussian input file to be created; defaults to \"mol.com\"."], [13, 2, 2, 0, "kwargs", "other kwargs that are passed to:"], [13, 2, 2, 0, "name", "Name of the Firework. Defaults to  calc_from_runs_db."], [13, 2, 2, 0, "output_file", "Name of the Gaussian output file to be output; defaults to \"mol.out\"."], [13, 2, 2, 0, "parents", "List of parent FWs this FW depends on."], [13, 2, 2, 0, "tag", "Tag for the calculation; the provided tag will be stored in the db documents for easy retrieval. Defaults to  \"unknown\"."], [13, 2, 2, 0, "working_dir", "Working directory for the calculation; defaults to the current directory."]], "mispr.gaussian.fireworks.core.common_tasks": [[13, 2, 2, 0, "cart_coords", "Whether to write cartesian coordinates or not; default is True."], [13, 2, 2, 0, "db", "Database credentials to store the run; could be provided as the path to the db.json file or in the form of a dictionary."], [13, 2, 2, 0, "gaussian_input_params", "A dictionary of parameters to be used in creating the Gaussian input file."], [13, 2, 2, 0, "input_file", "Name of the input file to be written."], [13, 2, 2, 0, "kwargs", "other kwargs that are passed to:"], [13, 2, 2, 0, "output_file", "name of the Gaussian output file"], [13, 2, 2, 0, "oxidation_states", "A dictionary of element symbols and their oxidation states used in setting the charge on the molecule."]], "mispr.gaussian.utilities": [[14, 0, 0, 1, "db_utilities", ""], [14, 0, 0, 1, "dbdoc", ""], [14, 0, 0, 1, "files", ""], [14, 0, 0, 1, "fw_utilities", ""], [14, 0, 0, 1, "gout", ""], [14, 0, 0, 1, "inputs", ""], [14, 0, 0, 1, "metadata", ""], [14, 0, 0, 1, "misc", ""], [14, 0, 0, 1, "mol", ""], [14, 0, 0, 1, "rdkit", ""]], "mispr.gaussian.utilities.db_utilities": [[14, 4, 1, 0, "get_db", "Helper function to create a GaussianCalcDb instance from a file or a dict."]], "mispr.gaussian.utilities.db_utilities.get_db": [[14, 2, 2, 0, "input_db", "Path to db file or a dict containing db info."]], "mispr.gaussian.utilities.dbdoc": [[14, 4, 1, 0, "add_solvent_to_prop_dict", "Add solvent properties to a property dictionary (e.g. BDE, BE, etc.)."]], "mispr.gaussian.utilities.dbdoc.add_solvent_to_prop_dict": [[14, 2, 2, 0, "prop_dict", "Property dictionary."], [14, 2, 2, 0, "solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model used in the Gaussian calculations, e.g. \"(Solvent=TetraHydroFuran)\"."], [14, 2, 2, 0, "solvent_properties", "Additional solvent input parameters used in the Gaussian calculations; e.g., {\"EPS\":12}."]], "mispr.gaussian.utilities.files": [[14, 4, 1, 0, "bibtex_parser", "Parse a bibtex file and returns a dictionary of the entries."], [14, 4, 1, 0, "recursive_relative_to_absolute_path", "Convert recursively relative file paths to absolute file paths."]], "mispr.gaussian.utilities.files.bibtex_parser": [[14, 2, 2, 0, "bib_file", "Relative or absolute path to the bibtex file."], [14, 2, 2, 0, "working_dir", "Name of the working directory where the bibtex file is located if bib_file path is relative; else None."]], "mispr.gaussian.utilities.files.recursive_relative_to_absolute_path": [[14, 2, 2, 0, "operand", "File, list of files, or a dictionary where the values are the files; the file(s) path can be relative or absolute."], [14, 2, 2, 0, "working_dir", "Name of the working directory where the file(s) is/are located if operand path is relative; else None."]], "mispr.gaussian.utilities.fw_utilities": [[14, 4, 1, 0, "add_common_mods", "Wrapper function to add common modifications to a workflow."], [14, 4, 1, 0, "control_worker", "Modify the Firework's fworker name and category in a workflow. Can be used when running workflows on multiple workers at the same time to specify which worker/machine to use."], [14, 4, 1, 0, "get_list_fireworks_and_tasks", "Return a list of (firework_index, task_index) tuples for all fireworks and tasks in a workflow."], [14, 4, 1, 0, "modify_queue_parameters", "Modify the default Firework's queue parameters in a workflow. Default ones are specified in the my_qadapter.yaml file. Helpful when different workflows requires different computational resources (e.g. number of CPUs, memory, etc.)."], [14, 4, 1, 0, "replace_runtask", "Replace all tasks with RunGaussian (e.g. RunGaussianDirect) with RunGaussianCustodian or vice versa."], [14, 4, 1, 0, "run_fake_gaussian", "Replace all tasks with RunGaussian (i.e. RunGaussianDirect, RunGaussianCustodian) with RunGaussianFake that runs a fake Gaussian job. We do not actually run Gaussian but copy existing inputs and outputs. Useful for testing purposes."]], "mispr.gaussian.utilities.fw_utilities.add_common_mods": [[14, 2, 2, 0, "fw_mods", "A dictionary of modifications to be applied to the workflow; supported ones are CONTROL_WORKER, MODIFY_QUEUE_PARAMETERS, REPLACE_RUNTASK, and RUN_FAKE_GAUSSIAN (see the docstring of each function for more details); values of the dictionary are the inputs to the corresponding function."], [14, 2, 2, 0, "workflow", "The workflow to modify."]], "mispr.gaussian.utilities.fw_utilities.control_worker": [[14, 2, 2, 0, "category", "The category to be assigned for the Firework; should be consistent with the one specified in the FireWorker (my_fworker.yaml file)."], [14, 2, 2, 0, "firework_substring", "A substring to search for in the Firework names to exclude certain fireworks."], [14, 2, 2, 0, "fworker", "The name of the fworker to use for the Firework; should be consistent with the one specified in the FireWorker (my_fworker.yaml file)."], [14, 2, 2, 0, "task_substring", "A substring to search for in the Firetask names to exclude certain Firetasks."], [14, 2, 2, 0, "workflow", "The workflow to control."]], "mispr.gaussian.utilities.fw_utilities.get_list_fireworks_and_tasks": [[14, 2, 2, 0, "firework_substring", "A substring to search for in the Firework names to exclude certain fireworks."], [14, 2, 2, 0, "task_substring", "A substring to search for in the Firetask names to exclude certain Firetasks."], [14, 2, 2, 0, "workflow", "The workflow to search."]], "mispr.gaussian.utilities.fw_utilities.modify_queue_parameters": [[14, 2, 2, 0, "firework_substring", "A substring to search for in the Firework names to exclude certain fireworks."], [14, 2, 2, 0, "ntasks_per_node", "The number of tasks to run on each node."], [14, 2, 2, 0, "other_parameters", "Other parameters to be added to the queueadapter."], [14, 2, 2, 0, "pre_rocket", "The pre-rocket command to run before the job."], [14, 2, 2, 0, "queue", "The queue/partition to run the job on."], [14, 2, 2, 0, "task_substring", "A substring to search for in the Firetask names to exclude certain Firetasks."], [14, 2, 2, 0, "walltime", "The walltime for the job."], [14, 2, 2, 0, "workflow", "The workflow to modify."]], "mispr.gaussian.utilities.fw_utilities.replace_runtask": [[14, 2, 2, 0, "additional_params", "Additional parameters to be added to the new Firetask that are not included in the original Firetask; refer to the corresponding Firetask documentation for supported parameters."], [14, 2, 2, 0, "firework_substring", "A substring to search for in the Firework names to exclude certain fireworks."], [14, 2, 2, 0, "operation", "The operation to perform on the Firetask; supported ones are remove_custodian and use_custodian."], [14, 2, 2, 0, "workflow", "The workflow to modify."]], "mispr.gaussian.utilities.fw_utilities.run_fake_gaussian": [[14, 2, 2, 0, "input_files", "A list of input files for the fake Gaussian job; order should match that in ref_dirs; e.g. [\"opt.com\", \"freq.com\"]."], [14, 2, 2, 0, "ref_dirs", "A list of directories containing the reference calculations for the fake Gaussian job (e.g. ['home/opt', 'home/freq'])."], [14, 2, 2, 0, "tolerance", "The tolerance for the comparison of the provided input file with the existing one."], [14, 2, 2, 0, "workflow", "The workflow to modify."]], "mispr.gaussian.utilities.gout": [[14, 4, 1, 0, "process_run", "Process a Gaussian run and returns a dictionary of the results. Used for creating db documents and/or json files."]], "mispr.gaussian.utilities.gout.process_run": [[14, 2, 2, 0, "input_file", "The input file for the run; used for adding Gaussian input parameters to the final Gaussian dictionary; if not specified, will get these parameters from the run itself, but in this case, input_parameters usually specified at the end of the Gaussian input file will not be saved since they are not easily retrieved from the Gaussian output file."], [14, 2, 2, 0, "kwargs", "Additional keyword arguments for the operation: namely, working_dir and db."], [14, 2, 2, 0, "operation_type", "Type of operation to be performed; supported ones are:"], [14, 2, 2, 0, "run", "The actual Gaussian run; type depends on the operation_type."]], "mispr.gaussian.utilities.inputs": [[14, 4, 1, 0, "handle_gaussian_inputs", "Wrapper function to cleanup/modify the Gaussian input parameters for one or more job in a workflow. Checks for implicit solvent parameters and adds missing keywords for a given job."]], "mispr.gaussian.utilities.inputs.handle_gaussian_inputs": [[14, 2, 2, 0, "gaussian_inputs", "Dictionary of dictionaries of Gaussian inputs, e.g."], [14, 2, 2, 0, "solvent_gaussian_inputs", "String of Gaussian inputs for the solvent, e.g."], [14, 2, 2, 0, "solvent_properties", "Dictionary of solvent properties, e.g."]], "mispr.gaussian.utilities.metadata": [[14, 4, 1, 0, "get_chem_schema", "Return a dictionary of chemical schema for a given molecule to use in building db documents or json file."], [14, 4, 1, 0, "get_job_name", "Append a molecule label to the name of a workflow for easy monitoring and identification."], [14, 4, 1, 0, "get_mol_formula", "Get the alphabetical molecular formula for a molecule."]], "mispr.gaussian.utilities.metadata.get_chem_schema": [[14, 2, 2, 0, "mol", "Molecule object."]], "mispr.gaussian.utilities.metadata.get_job_name": [[14, 2, 2, 0, "mol", "If a Molecule is provided, the appended label will be the molecular formula; otherwise the label will be the provided string."], [14, 2, 2, 0, "name", "Original name of the workflow."]], "mispr.gaussian.utilities.metadata.get_mol_formula": [[14, 2, 2, 0, "mol", "Molecule object"]], "mispr.gaussian.utilities.misc": [[14, 4, 1, 0, "pass_gout_dict", "Helper function used in the Gaussian Fireworks to pass Gaussian output dictionaries from one task to the other, while checking that the criteria for starting the following task are met (e.g. normal termination of the previous job, lack of imaginary frequencies, etc.)."], [14, 4, 1, 0, "recursive_compare_dicts", "Compare recursively two dictionaries and returns the differences."], [14, 4, 1, 0, "recursive_signature_remove", "Remove Recursively the signature \"@\" from a dictionary (e.g. those in the name of a module). Used when processing Gaussian runs before saving them to the db."]], "mispr.gaussian.utilities.misc.pass_gout_dict": [[14, 2, 2, 0, "fw_spec", "Firework spec dictionary."], [14, 2, 2, 0, "key", "Unique key for the Gaussian output dictionary in fw_spec."]], "mispr.gaussian.utilities.misc.recursive_compare_dicts": [[14, 2, 2, 0, "dict1", "First dictionary to compare."], [14, 2, 2, 0, "dict1_name", "Name of the first dictionary (for messages on the differences)."], [14, 2, 2, 0, "dict2", "Second dictionary to compare."], [14, 2, 2, 0, "dict2_name", "Name of the second dictionary (for messages on the differences)."], [14, 2, 2, 0, "path", "Used internally to keep track of the keys in nested dicts, meant to be \"\" for the top level"]], "mispr.gaussian.utilities.misc.recursive_signature_remove": [[14, 2, 2, 0, "d", "Dictionary to remove the signature from."]], "mispr.gaussian.utilities.mol": [[14, 4, 1, 0, "get_bond_order_str", "Find bond order as a string (\"U\": unspecified, \"S\", \"D\": double, \"T\": triple, \"A\": aromatic) by iterating over bonds of a molecule. First convert pymatgen mol to openbabel mol to use openbabel in finding bond order."], [14, 4, 1, 0, "label_atoms", "Get the SMILES representation of a molecule and label the atoms that appear in the SMILES string with the atom indexes as they appear in the molecule."], [14, 4, 1, 0, "perform_local_opt", "Perform a local optimization on the molecule using OpenBabel."], [14, 4, 1, 0, "process_mol", "Process a molecule. Used for handling different molecule formats provided to Gaussian workflows."]], "mispr.gaussian.utilities.mol.get_bond_order_str": [[14, 2, 2, 0, "mol", "pymatgen Molecule object."]], "mispr.gaussian.utilities.mol.label_atoms": [[14, 2, 2, 0, "mol", "The molecule to be labeled."]], "mispr.gaussian.utilities.mol.perform_local_opt": [[14, 2, 2, 0, "force_field", "The force field to be used for the optimization; options include gaff, ghemical, mmff94, mmff94s, and uff; defaults to uff."], [14, 2, 2, 0, "mol", "The molecule to be optimized."], [14, 2, 2, 0, "steps", "The number of steps to be performed in the local optimization; defaults to 200."]], "mispr.gaussian.utilities.mol.process_mol": [[14, 2, 2, 0, "kwargs", "Keyword arguments:"], [14, 2, 2, 0, "local_opt", "Whether to perform local optimization on the input structure using OpenBabel; defaults to False."], [14, 2, 2, 0, "mol", "Sources of structure, e.g. file path if mol_operation_type is specified as get_from_file, InChI string if mol_operation_type is specified as get_from_mol_db, etc."], [14, 2, 2, 0, "operation_type", "Operation to perform for the molecule to process the input structure format. Supported commands:"]], "mispr.gaussian.utilities.rdkit": [[14, 4, 1, 0, "calc_energy", "Perform local optimization on rdkit Mol object and calculates its energy using UFF."], [14, 4, 1, 0, "draw_rdkit_mol", "Draw the 2D structure of a molecule and saves it to a file."], [14, 4, 1, 0, "draw_rdkit_mol_with_highlighted_bonds", "Draw the 2D structure of a molecule and highlights the bonds specified by the user."], [14, 4, 1, 0, "get_rdkit_mol", "Convert a pymatgen mol object to RDKit rdmol object. Uses RDKit to perform the conversion <http://rdkit.org>. Accounts for aromaticity."]], "mispr.gaussian.utilities.rdkit.calc_energy": [[14, 2, 2, 0, "maxIters", "Maximum number of iterations to perform."], [14, 2, 2, 0, "rdkit_mol", "RDKit Mol object."]], "mispr.gaussian.utilities.rdkit.draw_rdkit_mol": [[14, 2, 2, 0, "filename", "Name of the file to save the image to; defaults to \"mol.png\"."], [14, 2, 2, 0, "rdkit_mol", "RDKit Mol object."], [14, 2, 2, 0, "working_dir", "Directory to save the image to; defaults to current working directory."]], "mispr.gaussian.utilities.rdkit.draw_rdkit_mol_with_highlighted_bonds": [[14, 2, 2, 0, "bonds", "List of tuples of indexes of atoms forming a bond to highlight; e.g. [(3, 11), (5, 13)] to highlight the bonds between sites 3 and 11 and sites 5 and 13."], [14, 2, 2, 0, "colors", "List of colors to use for highlighting the bonds; colors should be provided in rgb format, e.g. (0.0, 0.0, 0.0) for black; if not provided or number of colors provided is less than number of bonds to highlight, will randomly generate colors."], [14, 2, 2, 0, "filename", "Name of the file to save the image to; defaults to \"mol.png\"."], [14, 2, 2, 0, "rdkit_mol", "RDKit Mol object."], [14, 2, 2, 0, "working_dir", "Directory to save the image to; defaults to current working directory."]], "mispr.gaussian.utilities.rdkit.get_rdkit_mol": [[14, 2, 2, 0, "mol", "pymatgen Molecule object."], [14, 2, 2, 0, "remove_h", "whether to remove hydrogens."], [14, 2, 2, 0, "sanitize", "Whether to sanitize the molecule."]], "mispr.gaussian.workflows": [[16, 0, 0, 1, "base", ""]], "mispr.gaussian.workflows.base": [[16, 0, 0, 1, "bde", ""], [16, 0, 0, 1, "binding_energy", ""], [16, 0, 0, 1, "core", ""], [16, 0, 0, 1, "esp", ""], [16, 0, 0, 1, "ip_ea", ""], [16, 0, 0, 1, "nmr", ""]], "mispr.gaussian.workflows.base.bde": [[16, 4, 1, 0, "get_bde", "Define a dynamic workflow for calculating the bond dissociation energy."]], "mispr.gaussian.workflows.base.bde.get_bde": [[16, 2, 2, 0, "bonds", "List of tuples of the bonds to break; e.g. [(0, 1), (1, 2)] will break the bonds between atoms 0 and 1 and between atoms 1 and 2; if none is specified, will attempt to break all bonds. Defaults to None."], [16, 2, 2, 0, "cart_coords", "Uses cartesian coordinates in writing Gaussian input files if set to True,otherwise uses z-matrix. Defaults to True."], [16, 2, 2, 0, "db", "Database credentials; could be provided as the path to the \"db.json\" file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [16, 2, 2, 0, "fragment_charges", "List of additional charges to consider on the fragments besides the default ones. If ref_charge is -2, by default all fragments will be calculated with a charge of 0, -1, and -2. If the user provides fragment_charges is [-3], -3 and 1 will be additionally calculated. If the user provides fragment_charges is [-2], this will not cause any change since they are already calculated by the workflow. Defaults to None."], [16, 2, 2, 0, "freq_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step; default parameters will be used if not specified."], [16, 2, 2, 0, "kwargs", "Additional kwargs to be passed to the workflow."], [16, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [16, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations."], [16, 2, 2, 0, "name", "Name of the workflow. Defaults to \"bde_calculation\"."], [16, 2, 2, 0, "open_rings", "If True, will open rings encountered during fragmentation using OpenBabel's local opt. Defaults to False."], [16, 2, 2, 0, "opt_gaussian_inputs", "Dictionary of Gaussian input parameters for the optimization step; e.g.:"], [16, 2, 2, 0, "oxidation_states", "Dictionary of oxidation states that can be used in setting the charge and spin multiplicity of the molecule; e.g.: {\"Li\":1, \"O\":-2}. Defaults to None."], [16, 2, 2, 0, "ref_charge", "Charge on the principle molecule. Defaults to 0."], [16, 2, 2, 0, "skips", "List of jobs to skip; e.g.: [\"opt\", \"freq\"]; only applicable to the principle molecule. Defaults to None."], [16, 2, 2, 0, "solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model to be used in the ESP calculations, if any; e.g.:"], [16, 2, 2, 0, "solvent_properties", "Additional input parameters to be used in the ESP calculations and relevant to the solvent model, if any; e.g., {\"EPS\":12}. Defaults to None."], [16, 2, 2, 0, "visualize", "If True, will generate a summary plot of the 2D structure of the principle molecule with broken bonds highlighted in color, along with a bar plot of the corresponding BDEs; requires RDKit to be installed for bond highlighting; if RDKit is not found, will throw a warning and proceed normally."], [16, 2, 2, 0, "working_dir", "Path of the working directory where any required input files can be found and output will be created. Defaults to the current working directory."]], "mispr.gaussian.workflows.base.binding_energy": [[16, 4, 1, 0, "get_binding_energies", "Define a workflow for calculating the binding energy between two molecules."]], "mispr.gaussian.workflows.base.binding_energy.get_binding_energies": [[16, 2, 2, 0, "bond_order", "Bond order to calculate the bond length between the two sites. Defaults to 1."], [16, 2, 2, 0, "cart_coords", "Uses cartesian coordinates in writing Gaussian input files if set to True, otherwise uses z-matrix. Defaults to True."], [16, 2, 2, 0, "db", "Database credentials; could be provided as the path to the \"db.json\" file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [16, 2, 2, 0, "freq_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step; default parameters will be used if not specified."], [16, 2, 2, 0, "index", "List of indices of the two sites in the molecules at which they are expected to bind; order should match that in mol_operation_type and mol."], [16, 2, 2, 0, "kwargs", "Additional kwargs to be passed to the workflow."], [16, 2, 2, 0, "mol", "List of the source of the two molecules to be processed. Should match the order in mol_operation_type; e.g. if mol_operation_type is [\"get_from_mol\", \"get_from_file\"], mol should be [Molecule, path to molecule file]."], [16, 2, 2, 0, "mol_operation_type", "List of strings of the type of molecule operations. See process_mol defined in Defines the binding energy workflow.mispr/gaussian/utilities/mol.py for supported operations; e.g. [\"get_from_mol\", \"get_from_file\"] to get the first molecule from a Molecule object and the second molecule from a file."], [16, 2, 2, 0, "name", "name of the workflow; defaults to \"binding_energy_calculation\"."], [16, 2, 2, 0, "opt_gaussian_inputs", "Dictionary of Gaussian input parameters for the optimization step; e.g.:"], [16, 2, 2, 0, "oxidation_states", "Dictionary of oxidation states that can be used in setting the charge and spin multiplicity of the molecule; for example: {\"Li\":1, \"O\":-2}. Defaults to None."], [16, 2, 2, 0, "skips", "List of lists of jobs to skip for each molecule; e.g.: [[\"opt\", \"freq\"], [\"opt\"]]; order should be consistent with that in mol_operation_type and mol. Defaults to None."], [16, 2, 2, 0, "solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model to be used in the ESP calculations, if any; e.g.:"], [16, 2, 2, 0, "solvent_properties", "Additional input parameters to be used in the ESP calculations and relevant to the solvent model, if any; for example, {\"EPS\":12}. Defaults to None."], [16, 2, 2, 0, "working_dir", "Path of the working directory where any required input files can be found and output will be created. Defaults to the current working directory."]], "mispr.gaussian.workflows.base.core": [[16, 5, 1, 0, "GoutTypeError", "Bases: Exception"], [16, 4, 1, 0, "common_fw", "Define a list of Fireworks commonly used in Gaussian workflows."]], "mispr.gaussian.workflows.base.core.common_fw": [[16, 2, 2, 0, "cart_coords", "Whether to use cartesian coordinates in writing Gaussian input files."], [16, 2, 2, 0, "check_result", "List of properties to check for in the output file when skipping jobs; ensures that properties required by the workflow are available via the molecule format provided as an input (e.g. Gaussian output dictionary)."], [16, 2, 2, 0, "db", "Database credentials; could be provided as the path to the \"db.json\" file or in the form of a dictionary; if None is provided, attempts to get it from the configuration files."], [16, 2, 2, 0, "dir_head", "The name of the head of the directory where the workflow corresponding to the molecule will be run."], [16, 2, 2, 0, "freq_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step."], [16, 2, 2, 0, "gout_key", "Unique key for the Gaussian output dict; used to differentiate Gaussian output dictionaries generated in the same workflow; if None is provided, the key will be set \"mol\"."], [16, 2, 2, 0, "kwargs", "Additional kwargs to be passed to the Fireworks and Firetasks."], [16, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [16, 2, 2, 0, "mol_name", "The name of the molecule; ignored if process_mol_func is set to True."], [16, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations."], [16, 2, 2, 0, "opt_gaussian_inputs", "Dictionary of Gaussian input parameters for the optimization step."], [16, 2, 2, 0, "oxidation_states", "Dictionary of oxidation states that can be used in setting the charge and spin multiplicity of the molecule; e.g.: {\"Li\":1, \"O\":-2}."], [16, 2, 2, 0, "process_mol_func", "Whether to process the molecule; if True, will use the molecular formula as the label. Defaults to True."], [16, 2, 2, 0, "skips", "List of jobs to skip; e.g.: [\"opt\", \"freq\"]; defaults to None."], [16, 2, 2, 0, "working_dir", "Path of the working directory where any required input files can be found and output will be created."]], "mispr.gaussian.workflows.base.esp": [[16, 4, 1, 0, "get_esp_charges", "Define a workflow for calculating the electrostatic partial charges."]], "mispr.gaussian.workflows.base.esp.get_esp_charges": [[16, 2, 2, 0, "cart_coords", "Uses cartesian coordinates in writing Gaussian input files if set to True, otherwise uses z-matrix. Defaults to True."], [16, 2, 2, 0, "db", "Database credentials; could be provided as the path to the \"db.json\" file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [16, 2, 2, 0, "esp_gaussian_inputs", "Dictionary of Gaussian input parameters for the ESP step; default parameters will be used if not specified."], [16, 2, 2, 0, "freq_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step; default parameters will be used if not specified."], [16, 2, 2, 0, "kwargs", "Additional kwargs to be passed to the workflow."], [16, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [16, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations."], [16, 2, 2, 0, "name", "Name of the workflow. Defaults to \"esp_charges_calculation\"."], [16, 2, 2, 0, "opt_gaussian_inputs", "Dictionary of Gaussian input parameters for the optimization step; e.g.:"], [16, 2, 2, 0, "oxidation_states", "Dictionary of oxidation states that can be used in setting the charge and spin multiplicity of the molecule; e.g.: {\"Li\":1, \"O\":-2}. Defaults to None."], [16, 2, 2, 0, "skips", "List of jobs to skip; e.g.: [\"opt\", \"freq\"]; defaults to None."], [16, 2, 2, 0, "solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model to be used in the ESP calculations, if any; e.g.:"], [16, 2, 2, 0, "solvent_properties", "Additional input parameters to be used in the ESP calculations and relevant to the solvent model, if any; e.g., {\"EPS\":12}. Defaults to None."], [16, 2, 2, 0, "working_dir", "Path of the working directory where any required input files can be found and output will be created. Defaults to the current working directory."]], "mispr.gaussian.workflows.base.ip_ea": [[16, 1, 1, 0, "Node", "Bases: object"], [16, 4, 1, 0, "get_ip_ea", "Define a workflow for calculating the ionization potential (IP) and electron affinity (EA) in eV. Supports multiple methods for calculating redox potentials in gas and/or solution:"]], "mispr.gaussian.workflows.base.ip_ea.Node.__init__": [[16, 2, 2, 0, "branch_cation_from_anion", "Whether to add a hydrogen atom at the current node; relevant for PCET calculations."], [16, 2, 2, 0, "check_result", "List of properties to check for in the output file; only relevant when skipping jobs at the parent node;"], [16, 2, 2, 0, "h_index", "The site index in the molecule at which to attach the hydrogen atoms in the PCET calculations."], [16, 2, 2, 0, "mol", "Molecule to be processed; required for the parent node, i.e. initial molecule state, but not for the child nodes since these are generated from the parent node."], [16, 2, 2, 0, "mol_operation_type", "Type of molecule operation; required for the parent node, i.e. initial molecule state, but not for the child nodes."], [16, 2, 2, 0, "num_electrons", "Number of electrons to transfer."], [16, 2, 2, 0, "parent", "Parent node of the current node; None if the node corresponds to the initial molecule state."], [16, 2, 2, 0, "phase", "Current phase of the molecule: gas or solution."], [16, 2, 2, 0, "ref_charge", "The initial charge on the molecule; only relevant to the parent node."], [16, 2, 2, 0, "skips", "List of jobs to skip; only relevant to the parent node, i.e. initial molecule state. Defaults to None."], [16, 2, 2, 0, "state", "Current state of the molecule: cation or anion."]], "mispr.gaussian.workflows.base.ip_ea.Node": [[16, 3, 1, 0, "branch", "Generate the children nodes of the current node in the tree representing the IP/EA workflow."], [16, 3, 1, 0, "create_fireworks", "Generate the optimization and/or frequency fireworks corresponding to the current node."]], "mispr.gaussian.workflows.base.ip_ea.get_ip_ea": [[16, 2, 2, 0, "cart_coords", "Uses cartesian coordinates in writing Gaussian input files if set to True, otherwise uses z-matrix. Defaults to True."], [16, 2, 2, 0, "db", "Database credentials; could be provided as the path to the \"db.json\" file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [16, 2, 2, 0, "electrode_potentials", "Dictionary of electrode potentials to be used in converting the absolute oxidation and reduction potentials to commonly used potential scales; e.g.:"], [16, 2, 2, 0, "freq_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step; default parameters will be used if not specified."], [16, 2, 2, 0, "gibbs_elec", "The electron gibbs free energy in Hartree; defaults to -0.001378786."], [16, 2, 2, 0, "gibbs_h", "The hydrogen gibbs free energy in Hartree; defaults to -0.41816."], [16, 2, 2, 0, "h_index", "The site index in the molecule at which to attach the hydrogen atoms in the PCET calculations. Defaults to None."], [16, 2, 2, 0, "kwargs", "Additional kwargs to be passed to the workflow."], [16, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [16, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations."], [16, 2, 2, 0, "name", "Name of the workflow. Defaults to \"ip_ea_calculation\"."], [16, 2, 2, 0, "num_electrons", "The number of electrons to be transferred; defaults to 1."], [16, 2, 2, 0, "opt_gaussian_inputs", "Dictionary of Gaussian input parameters for the optimization step; e.g.:"], [16, 2, 2, 0, "pcet", "Whether to run sequential proton-coupled electron transfer calculations; number of hydrogen transfer steps is assumed to be equal to the number of electron transfers. Defaults to False."], [16, 2, 2, 0, "phases", "List of phases to be calculated; e.g. [\"solution\"] for liquid phase, [\"gas\"] for gas phase, or [\"gas\", \"solution\"] for the full thermodynamic cycle; runs both if None is specified."], [16, 2, 2, 0, "ref_charge", "The initial charge on the molecule."], [16, 2, 2, 0, "ref_skips", "List of jobs to skip; e.g.: [\"opt\", \"freq\"]; only applies to the molecule in the reference state. Defaults to None."], [16, 2, 2, 0, "single_step", "Whether to run the electron transfer in a single or multiple steps; e.g. if num_electrons is set to 2 and single_step is False, the workflow will run the electron transfer in two steps; defaults to False."], [16, 2, 2, 0, "solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model to be used in the redox potential calculations, if any; e.g.:"], [16, 2, 2, 0, "solvent_properties", "Additional input parameters to be used in the ESP calculations and relevant to the solvent model, if any; e.g., {\"EPS\":12}. Defaults to None."], [16, 2, 2, 0, "states", "List of states to be calculated; e.g. [\"cation\"] for oxidation, [\"anion\"] for reduction, or [\"cation\", \"anion\"] for oxidation and reduction calculations; runs both if None is specified."], [16, 2, 2, 0, "vertical", "Whether to run the vertical IP/EA calculations, in which optimization is performed only at the reference state at each phase specified, thereby skipping the optimization step at the charge states; defaults to False."], [16, 2, 2, 0, "working_dir", "Path of the working directory where any required input files can be found and output will be created. Defaults to the current working directory."]], "mispr.gaussian.workflows.base.nmr": [[16, 4, 1, 0, "get_nmr_tensors", "Define a workflow for calculating the nuclear magnetic resonance tensors."]], "mispr.gaussian.workflows.base.nmr.get_nmr_tensors": [[16, 2, 2, 0, "cart_coords", "Uses cartesian coordinates in writing Gaussian input files if set to True, otherwise uses z-matrix. Defaults to True."], [16, 2, 2, 0, "db", "Database credentials; could be provided as the path to the \"db.json\" file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [16, 2, 2, 0, "freq_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step; default parameters will be used if not specified."], [16, 2, 2, 0, "kwargs", "Additional kwargs to be passed to the workflow."], [16, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [16, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations."], [16, 2, 2, 0, "name", "Name of the workflow. Defaults to \"nmr_tensor_calculation\"."], [16, 2, 2, 0, "nmr_gaussian_inputs", "Dictionary of Gaussian input parameters for the NMR step; default parameters will be used if not specified."], [16, 2, 2, 0, "opt_gaussian_inputs", "Dictionary of Gaussian input parameters; e.g.:"], [16, 2, 2, 0, "oxidation_states", "Dictionary of oxidation states that can be used in setting the charge and spin multiplicity of the molecule; e.g.: {\"Li\":1, \"O\":-2}. Defaults to None."], [16, 2, 2, 0, "skips", "List of jobs to skip; e.g.: [\"opt\", \"freq\"]; defaults to None."], [16, 2, 2, 0, "solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model to be used in the NMR calculations, if any; e.g.:"], [16, 2, 2, 0, "solvent_properties", "Additional input parameters to be used in the NMR calculations and relevant to the solvent model, if any; e.g., {\"EPS\":12}. Defaults to None."], [16, 2, 2, 0, "working_dir", "Path of the working directory where any required input files can be found and output will be created. Defaults to the current working directory."]], "mispr.hybrid": [[17, 0, 0, 1, "defaults", ""], [18, 0, 0, 1, "firetasks", ""], [19, 0, 0, 1, "workflows", ""]], "mispr.hybrid.firetasks": [[18, 0, 0, 1, "nmr_from_md", ""]], "mispr.hybrid.firetasks.nmr_from_md": [[18, 1, 1, 0, "NMRFromMD", "Bases: FiretaskBase"]], "mispr.hybrid.firetasks.nmr_from_md.NMRFromMD": [[18, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.hybrid.firetasks.nmr_from_md.NMRFromMD.run_task": [[18, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.hybrid.workflows": [[19, 0, 0, 1, "core", ""], [19, 0, 0, 1, "nmr", ""]], "mispr.hybrid.workflows.core": [[19, 4, 1, 0, "run_hybrid_calcs", ""]], "mispr.hybrid.workflows.nmr": [[19, 4, 1, 0, "get_solvation_structures_nmr", "Return a workflow to run hybrid DFT/MD calculations, extract categorize atomic clusters around a particle of interest, and run the NMR calculations for the clusters that have the highest frequency of occurrence in solution."]], "mispr.hybrid.workflows.nmr.get_solvation_structures_nmr": [[19, 2, 2, 0, "analysis_list", "Type of MD analysis to perform after the MD simulations are finished; e.g.: [\"diffusion\", \"rdf\", \"cn\", \"clusters\"] if user wants to perform diffusion, RDF, coordination number, and cluster analysis."], [19, 2, 2, 0, "analysis_settings", "Settings of the MD analysis steps; please refer to the mdproptools documentation for details of inputs used in the analysis functions; order of settings should correspond to the order used in analysis_list."], [19, 2, 2, 0, "box_data", "Definitions for box size. See box_data_type for info how to define this parameter."], [19, 2, 2, 0, "box_data_type", "Can be one of the following: \"cubic\", \"rectangular\", or \"LammpsBox\". If \"cubic\", box_data must be a float or int; if \"rectangular\", box_data must be an array-like with size (3,2); if \"LammpsBox\", box_data must be a pymatgen.io.lammps.data.LammpsBox object. Defaults to \"cubic\"."], [19, 2, 2, 0, "cart_coords", "Uses cartesian coordinates in writing Gaussian input files if set to True, otherwise uses z-matrix. Defaults to True."], [19, 2, 2, 0, "data_file_name", "Name of the LAMMPS data file to create and use; defaults to \"data.mixture\"."], [19, 2, 2, 0, "db", "Database credentials; could be provided as the path to the \"db.json\" file or in the form of a dictionary; if none is provided, attempts to get it from the configuration files."], [19, 2, 2, 0, "esp_gaussian_inputs", "Sictionary of Gaussian input parameters for the ESP step of the ESP workflow; default parameters will be used if not specified."], [19, 2, 2, 0, "esp_solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model to be used in the ESP calculations, if any; e.g.:"], [19, 2, 2, 0, "esp_solvent_properties", "Additional input parameters to be used in the ESP calculations and relevant to the solvent model, if any; e.g., {\"EPS\":12}."], [19, 2, 2, 0, "ff_method", "Operation to perform for each molecule composing the liquid solution in order to process the force field parameters. Can be \"get_from_esp\", \"get_from_prmtop\", \"get_from_dict\", \"get_from_opls\". Defaults to \"get_from_esp\" for all molecules."], [19, 2, 2, 0, "ff_params", "Sources of the force field parameters for each molecule type; type depends on what is specified in the ff_method input; if \"get_from_esp\" is used, the corresponding ff_param should be an empty dictionary since the path to the ESP file is automatically detected from the ESP calculations that is performed at the beginning of the workflow; if \"get_from_prmtop\" is used, the corresponding ff_param should be the path to the prmtop file; if \"get_from_dict\" is used, the corresponding ff_param should be a dictionary, e.g.:"], [19, 2, 2, 0, "freq_esp_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step of the ESP workflow; default parameters will be used if not specified."], [19, 2, 2, 0, "freq_nmr_gaussian_inputs", "Dictionary of Gaussian input parameters for the frequency step of the NMR workflow; default parameters will be used if not specified."], [19, 2, 2, 0, "kwargs", "Additional kwargs to be passed to the workflow; e.g.: lammps recipe and recipe_settings; the defaults for these inputs are specified in the mispr/lammps/defaults.py."], [19, 2, 2, 0, "mixture_type", "\"concentration\" or \"number of molecules\"; defaults to \"number of molecules\"."], [19, 2, 2, 0, "mol", "Sources of structures making up the liquid solution, e.g. file path if mol_operation_type is specified as \"get_from_file\", InChI string if mol_operation_type is specified as \"get_from_mol_db\", etc."], [19, 2, 2, 0, "mol_data", "Format depends on mixture_type input. If mixture_type is \"number of molecules\", mol_data should be a list of the number of molecules of each type. If mixture_type is \"concentration\", mol_data should be a list of dict, where each dictionary should follow the format:"], [19, 2, 2, 0, "mol_operation_type", "Operation to perform for each molecule composing the liquid solution in order to process the input structure format. Length should correspond to the number of molecules/species composing the liquid solution. Supported commands:"], [19, 2, 2, 0, "mol_type", "Type of each structure composing the liquid solution. Supported types: \"Solvents\", \"Solutes\". Used for calculating the number of molecules of each type if this information is not provided."], [19, 2, 2, 0, "name", "Name of the workflow. Defaults to \"hybrid_calculation\"."], [19, 2, 2, 0, "nmr_gaussian_inputs", "Dictionary of Gaussian input parameters for the NMR step of the NMR workflow; default parameters will be used if not specified."], [19, 2, 2, 0, "nmr_solvent_gaussian_inputs", "Gaussian input parameters corresponding to the implicit solvent model to be used in the NMR calculations, if any; e.g.:"], [19, 2, 2, 0, "nmr_solvent_properties", "Additional input parameters to be used in the NMR calculations and relevant to the solvent model, if any; e.g., {\"EPS\":12}."], [19, 2, 2, 0, "opt_esp_gaussian_inputs", "Dictionary of Gaussian input parameters for the optimization step of the ESP workflow; e.g.:"], [19, 2, 2, 0, "opt_nmr_gaussian_inputs", "Dictionary of Gaussian input parameters for the optimization step of the NMR workflow; default parameters will be used if not specified."], [19, 2, 2, 0, "oxidation_states", "Dictionary of oxidation states that can be used in setting the charge and spin multiplicity of the clusters extracted from MD simulations to be used in the NMR workflow."], [19, 2, 2, 0, "skips", "Type of DFT calculation to skip in the ESP workflow for each molecule; e.g. [\"opt\", \"freq\"], [\"opt\"], [\"freq\"], or []."], [19, 2, 2, 0, "working_dir", "Path of the working directory where any required input files can be found and output will be created."]], "mispr.lammps": [[20, 0, 0, 1, "database", ""], [20, 0, 0, 1, "defaults", ""], [21, 0, 0, 1, "firetasks", ""], [22, 0, 0, 1, "fireworks", ""], [23, 0, 0, 1, "tests", ""], [24, 0, 0, 1, "utilities", ""], [25, 0, 0, 1, "workflows", ""]], "mispr.lammps.database": [[20, 1, 1, 0, "LammpsSysDb", "Bases: object"]], "mispr.lammps.database.LammpsSysDb": [[20, 3, 1, 0, "build_indexes", ""], [20, 3, 1, 0, "delete_force_field", ""], [20, 3, 1, 0, "from_db_file", ""], [20, 3, 1, 0, "insert_force_field", ""], [20, 3, 1, 0, "insert_run", ""], [20, 3, 1, 0, "insert_system", ""], [20, 3, 1, 0, "query_force_fields", ""], [20, 3, 1, 0, "retrieve_force_field", ""], [20, 3, 1, 0, "retrieve_run", ""]], "mispr.lammps.firetasks": [[21, 0, 0, 1, "parse_outputs", ""], [21, 0, 0, 1, "run", ""], [21, 0, 0, 1, "write_inputs", ""]], "mispr.lammps.firetasks.parse_outputs": [[21, 1, 1, 0, "CalcCN", "Bases: FiretaskBase"], [21, 1, 1, 0, "CalcDiff", "Bases: FiretaskBase"], [21, 1, 1, 0, "ExtractClusters", "Bases: FiretaskBase"], [21, 1, 1, 0, "GetRDF", "Bases: FiretaskBase"], [21, 1, 1, 0, "ProcessAnalysis", "Bases: FiretaskBase"], [21, 1, 1, 0, "ProcessPrmtop", "Bases: FiretaskBase"]], "mispr.lammps.firetasks.parse_outputs.CalcCN": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.parse_outputs.CalcCN.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.parse_outputs.CalcDiff": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.parse_outputs.CalcDiff.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.parse_outputs.ExtractClusters": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.parse_outputs.ExtractClusters.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.parse_outputs.GetRDF": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.parse_outputs.GetRDF.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.parse_outputs.ProcessAnalysis": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.parse_outputs.ProcessAnalysis.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.parse_outputs.ProcessPrmtop": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.parse_outputs.ProcessPrmtop.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.run": [[21, 1, 1, 0, "RunAntechamber", "Bases: FiretaskBase"], [21, 1, 1, 0, "RunLammpsDirect", "Bases: FiretaskBase"], [21, 1, 1, 0, "RunLammpsFake", "Bases: FiretaskBase"], [21, 1, 1, 0, "RunMaestro", "Bases: FiretaskBase"], [21, 1, 1, 0, "RunParmchk", "Bases: FiretaskBase"], [21, 1, 1, 0, "RunTleap", "Bases: FiretaskBase"]], "mispr.lammps.firetasks.run.RunAntechamber": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.run.RunAntechamber.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.run.RunLammpsDirect": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.run.RunLammpsDirect.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.run.RunLammpsFake": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.run.RunLammpsFake.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.run.RunMaestro": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.run.RunMaestro.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.run.RunParmchk": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.run.RunParmchk.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.run.RunTleap": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.run.RunTleap.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.write_inputs": [[21, 1, 1, 0, "LabelFFDict", "Bases: FiretaskBase"], [21, 1, 1, 0, "LabelFFDictFromDB", "Bases: FiretaskBase"], [21, 1, 1, 0, "WriteControlFile", "Bases: FiretaskBase"], [21, 1, 1, 0, "WriteDataFile", "Bases: FiretaskBase"], [21, 1, 1, 0, "WriteTleapScript", "Bases: FiretaskBase"]], "mispr.lammps.firetasks.write_inputs.LabelFFDict": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.write_inputs.LabelFFDict.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.write_inputs.LabelFFDictFromDB": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.write_inputs.LabelFFDictFromDB.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.write_inputs.WriteControlFile": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.write_inputs.WriteControlFile.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.write_inputs.WriteDataFile": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.write_inputs.WriteDataFile.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.firetasks.write_inputs.WriteTleapScript": [[21, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.firetasks.write_inputs.WriteTleapScript.run_task": [[21, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.fireworks": [[22, 0, 0, 1, "core", ""]], "mispr.lammps.fireworks.core": [[22, 1, 1, 0, "GetFFDictFW", "Bases: Firework"], [22, 1, 1, 0, "RunAnalysisFW", "Bases: Firework"], [22, 1, 1, 0, "RunLammpsFW", "Bases: Firework"], [22, 4, 1, 0, "ambertools_tasks", "Define a list of common tasks for generating GAFF parameters for a molecule. This is a helper function for the GetFFDictFW Firework."]], "mispr.lammps.fireworks.core.GetFFDictFW.__init__": [[22, 2, 2, 0, "data", "Data to be processed, e.g., path to the esp file if operation_type is get_from_esp, path to the prmtop file if operation_type is get_from_prmtop, etc."], [22, 2, 2, 0, "db", "Database credentials. Could be provided as the path to the \"db.json\" file or in the form of a dict. If none is provided, attempts to read it from the configuration files to save the Firework to."], [22, 2, 2, 0, "ff_filename", "Filename to save the force field to. Defaults to \"ff.json\"."], [22, 2, 2, 0, "kwargs", "Other kwargs that are passed to:"], [22, 2, 2, 0, "label", "Label for the molecule. This should be unique for each different molecular species in the system. Defaults to an empty string. In this case, the label will be obtained based on the molecular formula."], [22, 2, 2, 0, "mol", "Source of the molecule to be processed. Should match the mol_operation_type."], [22, 2, 2, 0, "mol_operation_type", "The type of molecule operation. See process_mol defined in mispr/gaussian/utilities/mol.py for supported operations."], [22, 2, 2, 0, "name", "Name of the Firework. Defaults to get_ff_dict."], [22, 2, 2, 0, "operation_type", "The operation to perform on the data to read or generate the force field parameters. Defaults to get_from_esp. Supported commands:"], [22, 2, 2, 0, "parents", "List of parent Fireworks that this Firework depends on. Defaults to None."], [22, 2, 2, 0, "save_ff_to_db", "Whether to save the force field to the database. Defaults to False."], [22, 2, 2, 0, "save_ff_to_file", "Whether to save the force field to a file. Defaults to True."], [22, 2, 2, 0, "tag", "Tag for the Firework. The provided tag will be stored in the db documents for easy retrieval. Defaults to \"unknown\"."], [22, 2, 2, 0, "working_dir", "Directory to run the Firework in. Defaults to the current working directory."]], "mispr.lammps.fireworks.core.RunAnalysisFW.__init__": [[22, 2, 2, 0, "kwargs", "Other kwargs that are passed to:"], [22, 2, 2, 0, "md_property", "The property to calculate. Supported properties:"], [22, 2, 2, 0, "name", "Name of the Firework. Defaults to \"run_analysis\"."], [22, 2, 2, 0, "parents", "List of parent Fireworks that this Firework depends on. Defaults to None."], [22, 2, 2, 0, "tag", "Tag for the Firework. The provided tag will be stored in the db documents for easy retrieval. Defaults to \"unknown\"."], [22, 2, 2, 0, "working_dir", "Directory to run the Firework in. Defaults to the current working directory."]], "mispr.lammps.fireworks.core.RunLammpsFW.__init__": [[22, 2, 2, 0, "control_file", "Path to the control file. If not provided, the control file will be generated. Defaults to None."], [22, 2, 2, 0, "db", "Database credentials. Could be provided as the path to the db.json file or in the form of a dict. If none is provided, attempts to read it from the configuration files to save the Firework to."], [22, 2, 2, 0, "kwargs", "Other kwargs that are passed to:"], [22, 2, 2, 0, "name", "Name of the Firework. Defaults to \"run_lammps\"."], [22, 2, 2, 0, "parents", "List of parent Fireworks that this Firework depends on. Defaults to None."], [22, 2, 2, 0, "save_run_to_db", "Whether to save the run to the database. Defaults to True."], [22, 2, 2, 0, "save_run_to_file", "Whether to save the run to a file. Defaults to False."], [22, 2, 2, 0, "tag", "Tag for the Firework. The provided tag will be stored in the db documents for easy retrieval. Defaults to \"unknown\"."], [22, 2, 2, 0, "working_dir", "Directory to run the Firework in. Defaults to the current working directory."]], "mispr.lammps.fireworks.core.ambertools_tasks": [[22, 2, 2, 0, "kwargs", "other kwargs that are passed to:"]], "mispr.lammps.tests": [[23, 0, 0, 1, "antechamber", ""], [23, 0, 0, 1, "base_test", ""], [23, 0, 0, 1, "control", ""], [23, 0, 0, 1, "custom_data_workflow", ""], [23, 0, 0, 1, "data", ""], [23, 0, 0, 1, "electrolyte_wf", ""], [23, 0, 0, 1, "esp_to_ff_dict_custom", ""], [23, 0, 0, 1, "esp_to_ff_dict_function", ""], [23, 0, 0, 1, "liquid_wf_local", ""], [23, 0, 0, 1, "parmchk", ""], [23, 0, 0, 1, "prmtop", ""], [23, 0, 0, 1, "run_lammps", ""], [23, 0, 0, 1, "tleap", ""]], "mispr.lammps.tests.base_test": [[23, 1, 1, 0, "PrintFW", "Bases: FiretaskBase"]], "mispr.lammps.tests.base_test.PrintFW": [[23, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.tests.base_test.PrintFW.run_task": [[23, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.tests.data": [[23, 1, 1, 0, "PrintFW", "Bases: FiretaskBase"]], "mispr.lammps.tests.data.PrintFW": [[23, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.tests.data.PrintFW.run_task": [[23, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.tests.esp_to_ff_dict_custom": [[23, 1, 1, 0, "PrintFW", "Bases: FiretaskBase"]], "mispr.lammps.tests.esp_to_ff_dict_custom.PrintFW": [[23, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.tests.esp_to_ff_dict_custom.PrintFW.run_task": [[23, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.tests.esp_to_ff_dict_function": [[23, 1, 1, 0, "PrintFW", "Bases: FiretaskBase"]], "mispr.lammps.tests.esp_to_ff_dict_function.PrintFW": [[23, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.tests.esp_to_ff_dict_function.PrintFW.run_task": [[23, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.tests.prmtop": [[23, 1, 1, 0, "PrintFW", "Bases: FiretaskBase"]], "mispr.lammps.tests.prmtop.PrintFW": [[23, 3, 1, 0, "run_task", "This method gets called when the Firetask is run. It can take in a Firework spec, perform some task using that data, and then return an output in the form of a FWAction."]], "mispr.lammps.tests.prmtop.PrintFW.run_task": [[23, 2, 2, 0, "fw_spec", "A Firework spec. This comes from the master spec. In addition, this spec contains a special \"_fw_env\" key that contains the env settings of the FWorker calling this method. This provides for abstracting out certain commands or settings. For example, \"foo\" may be named \"foo1\" in resource 1 and \"foo2\" in resource 2. The FWorker env can specify { \"foo\": \"foo1\"}, which maps an abstract variable \"foo\" to the relevant \"foo1\" or \"foo2\". You can then write a task that uses fw_spec[\"_fw_env\"][\"foo\"] that will work across all these multiple resources."]], "mispr.lammps.utilities": [[24, 0, 0, 1, "opls", ""], [24, 0, 0, 1, "utilities", ""]], "mispr.lammps.utilities.opls": [[24, 1, 1, 0, "MaestroRunner", "Bases: object"]], "mispr.lammps.utilities.opls.MaestroRunner.__init__": [[24, 2, 2, 0, "ffld_cmd", "Full command to use for generating the force field parameters from the mae file. If not specified, will try to parse the command from the MISPR configuration file."], [24, 2, 2, 0, "input_file", "Molecule/structure file to use for converting to a mae file. For a full list of supported formats, check https://www.schrodinger.com/kb/1278."], [24, 2, 2, 0, "mae_cmd", "Full command to use for converting the structure format to mae file; if not specified, will try to parse the command from the MISPR configuration file."], [24, 2, 2, 0, "name", "Name of the molecule to use when saving the mae and log files generated by Maestro."], [24, 2, 2, 0, "working_dir", "Working directory where the input_file is located and Maestro files to be generated."]], "mispr.lammps.utilities.opls.MaestroRunner": [[24, 3, 1, 0, "cleanup", "Deletes the log and mae files created by Maestro"], [24, 3, 1, 0, "convert_ff_log_to_json", "Converts the force field parameters in the log file to a dictionary format that is compatible with MISPR."], [24, 3, 1, 0, "convert_mol_to_mae", "Converts a structure input file to a mae file."], [24, 3, 1, 0, "get_ff_log", "Generates a log file with force field parameters using a mae file."], [24, 3, 1, 0, "get_opls_params", "Wrapper function that converts input structure to mae format, uses it to generate a log file with the force field parameters of the molecule, parses the log file to generate a dictionary of force parameters in a format compatible with the lammps workflow in MISPR, and optionally cleans up the working directory by removing the intermediate files generated in the process."]], "mispr.lammps.utilities.opls.MaestroRunner.get_opls_params": [[24, 2, 2, 0, "cleanup", "Whether to clean up the working directory. Defaults to True."]], "mispr.lammps.utilities.utilities": [[24, 4, 1, 0, "add_ff_labels_to_BADI_lists", "Add extra string to the end of all atom type labels in lists containing information about Bonds, Angles, Dihedrals, or Impropers (BADI). This function is intended to be used through the add_ff_labels_to_dict."], [24, 4, 1, 0, "add_ff_labels_to_dict", "A dictionary containing the force field information for a molecule. The dictionary should have the following form:"], [24, 4, 1, 0, "get_db", ""], [24, 4, 1, 0, "lammps_mass_to_element", "Create a dict for mapping atom mass to element."], [24, 4, 1, 0, "process_ff_doc", ""], [24, 4, 1, 0, "process_run", ""], [24, 4, 1, 0, "run_fake_lammps", ""]], "mispr.lammps.utilities.utilities.add_ff_labels_to_BADI_lists": [[24, 2, 2, 0, "ff_list", "The value from ff_dict using one of the following keys: 'Bonds', 'Angles', 'Dihedrals', or 'Impropers'. The form of this list should be as follows:"], [24, 2, 2, 0, "label", "A label for the molecular species that is unique for the system being created."]], "mispr.lammps.utilities.utilities.add_ff_labels_to_dict": [[24, 2, 2, 0, "ff_dict", "A dictionary containing the force field information for a molecule. The dictionary should have the following form:"], [24, 2, 2, 0, "label", ""]], "mispr.lammps.utilities.utilities.lammps_mass_to_element": [[24, 2, 2, 0, "lammps_masses", "List of masses in lammps units."]], "mispr.lammps.workflows": [[25, 0, 0, 1, "base", ""]], "mispr.lammps.workflows.base": [[25, 4, 1, 0, "lammps_analysis_fws", "Generate FireWorks for running LAMMPS analysis."], [25, 4, 1, 0, "lammps_data_fws", "Generate FireWorks for writing LAMMPS data files."], [25, 4, 1, 0, "lammps_run_fws", "Generate FireWorks for running LAMMPS simulations."], [25, 4, 1, 0, "lammps_workflow", "Create a LAMMPS workflow."]], "mispr.lammps.workflows.base.lammps_analysis_fws": [[25, 2, 2, 0, "analysis_list", "List of analysis types to perform. Supported types are: 'diffusion', 'rdf', 'cn', and 'clusters'."], [25, 2, 2, 0, "analysis_settings", "List of dictionaries containing the settings for each analysis type."], [25, 2, 2, 0, "kwargs", "Additional keyword arguments."], [25, 2, 2, 0, "working_dir", "Directory where the data files will be written."]], "mispr.lammps.workflows.base.lammps_data_fws": [[25, 2, 2, 0, "box_data", "Definitions for box size. See box_data_type for info how to define this parameter."], [25, 2, 2, 0, "box_data_type", "Determines the value of the box_data parameter. Can be one of the following: 'cubic', 'rectangular', or 'LammpsBox'. If 'cubic', box_data must be a float or int; if 'rectangular', box_data must be an array-like with size (3,2); if 'LammpsBox', box_data must be a LammpsBox object. Defaults to 'cubic'."], [25, 2, 2, 0, "data_file_name", "Name of the data file to be written. Defaults to \"complex.data\"."], [25, 2, 2, 0, "db", "Database credentials. Could be a string with the path to the database file or a dictionary with the database credentials. If none is provided, attempts to read the configuration files. Only used when save_ff_to_db is True."], [25, 2, 2, 0, "kwargs", "Additional keyword arguments."], [25, 2, 2, 0, "system_mixture_type", "Type of mixture data. Must be \"concentration\" or \"number of molecules\". See LammpsDataWrapper in pymatgen/io/lammps/data.py for more information."], [25, 2, 2, 0, "system_species_data", "Dictionary containing species data. The keys are the species labels and the values are dictionaries containing the following keys:"], [25, 2, 2, 0, "tag", "Tag for the Fireworks. Defaults to \"unknown\"."], [25, 2, 2, 0, "working_dir", "Directory where the data files will be written. Defaults to the current working directory."]], "mispr.lammps.workflows.base.lammps_run_fws": [[25, 2, 2, 0, "db", "Database credentials. Could be a string with the path to the database file or a dictionary with the database credentials. If none is provided, attempts to read the configuration files. Only used when save_runs_to_db is True."], [25, 2, 2, 0, "init_spec", "Initial spec for the FireWorks. Defaults to None."], [25, 2, 2, 0, "kwargs", "Additional keyword arguments."], [25, 2, 2, 0, "recipe", "List of lists containing the name of the step and the template filename or string for the LAMMPS input file. Defaults to LAMMPS_RECIPE."], [25, 2, 2, 0, "recipe_qadapter", "List of dictionaries containing the settings for the queue adapter for each step in the recipe. Defaults to QADAPTER_RUN_LAMMPS_SPEC."], [25, 2, 2, 0, "recipe_settings", "List of dictionaries containing the settings for each step in the recipe. Defaults to RECIPE_SETTINGS."], [25, 2, 2, 0, "save_runs_to_db", "Whether to save the runs to the database. Defaults to True."], [25, 2, 2, 0, "save_runs_to_file", "Whether to save the runs to a file. Defaults to False."], [25, 2, 2, 0, "working_dir", "Directory where the data files will be written. Defaults to the current working directory."]], "mispr.lammps.workflows.base.lammps_workflow": [[25, 2, 2, 0, "analysis_list", "List of analysis types to perform. Supported types are: 'diffusion', 'rdf', 'cn', and 'clusters'. Defaults to None. If not provided, the workflow will not create any FireWorks for running LAMMPS analysis."], [25, 2, 2, 0, "analysis_settings", "List of dictionaries containing the settings for each analysis type. Defaults to None. If not provided, the workflow will not create any FireWorks for running LAMMPS analysis."], [25, 2, 2, 0, "box_data", "Definitions for box size. See lammps_data_fws for info on how to define this parameter. Defaults to None. If not provided, the workflow will not create any FireWorks for writing LAMMPS data files."], [25, 2, 2, 0, "box_data_type", "Determines the value of the box_data parameter. Defaults to 'cubic'."], [25, 2, 2, 0, "data_file_name", "Name of the data file to be written. Defaults to 'data.mixture'."], [25, 2, 2, 0, "db", "Database credentials. Could be a string with the path to the database file or a dictionary with the database credentials. If none is provided, attempts to read the configuration files. Only used when save_runs_to_db is True. Defaults to None."], [25, 2, 2, 0, "kwargs", "Additional keyword arguments."], [25, 2, 2, 0, "name", "Name of the workflow. Defaults to 'lammps_workflow'."], [25, 2, 2, 0, "recipe", "List of lists containing the name of the step and the template filename or string for the LAMMPS input file. Defaults to LAMMPS_RECIPE."], [25, 2, 2, 0, "recipe_qadapter", "List of dictionaries containing the settings for the queue adapter for each step in the recipe. Defaults to QADAPTER_RUN_LAMMPS_SPEC."], [25, 2, 2, 0, "recipe_settings", "List of dictionaries containing the settings for each step in the recipe. Defaults to RECIPE_SETTINGS."], [25, 2, 2, 0, "system_mixture_type", "Type of mixture data. Must be \"concentration\" or \"number of molecules\". See LammpsDataWrapper in pymatgen/io/lammps/data.py for more information. Defaults to None. If not provided, the workflow will not create any FireWorks for writing LAMMPS data files."], [25, 2, 2, 0, "system_species_data", "Dictionary containing species data. Refer to the lammps_data_fws function for more information. Defaults to None. If not provided, the workflow will not create any FireWorks for writing LAMMPS data files."], [25, 2, 2, 0, "working_dir", "Directory where the data files will be written. Defaults to the current working directory."]]}, "objtypes": {"0": "py:module", "1": "py:class", "2": "py:parameter", "3": "py:method", "4": "py:function", "5": "py:exception"}, "objnames": {"0": ["py", "module", "Python module"], "1": ["py", "class", "Python class"], "2": ["py", "parameter", "Python parameter"], "3": ["py", "method", "Python method"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"]}, "titleterms": {"changelog": 0, "cite": 1, "mispr": [1, 2, 5, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26], "0": 2, "4": 2, "document": [2, 29], "instal": [2, 5], "import": [2, 4, 19], "learn": 2, "resourc": 2, "contribut": 2, "report": 2, "support": [2, 32], "configur": 3, "file": [3, 14], "note": [3, 4, 5, 6, 12, 16, 27, 30, 32, 33], "write": 3, "bash": 3, "profil": 3, "prerequisit": 4, "conda": 4, "environ": 4, "creat": [4, 31], "requir": 4, "softwar": 4, "comput": 4, "chemistri": 4, "depend": 4, "python": 4, "packag": [4, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "mongodb": 4, "set": 4, "up": 4, "test": [4, 6, 23], "your": 4, "connect": 4, "method": 5, "1": 5, "us": 5, "pip": 5, "2": 5, "develop": 5, "mode": 5, "post": 5, "run": [6, 21, 33], "workflow": [6, 15, 16, 19, 25, 30, 31, 32, 33], "initi": 6, "databas": [6, 11, 20], "warn": 6, "add": 6, "verifi": 6, "submit": 6, "monitor": 6, "queri": 6, "result": 6, "keyword": 7, "licens": 8, "subpackag": [9, 11, 15, 17, 20], "modul": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "content": [9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "common": 10, "submodul": [10, 11, 12, 13, 14, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25], "pubchem": 10, "gaussian": [11, 12, 13, 14, 15, 16], "default": [11, 17, 20], "firetask": [12, 18, 21], "geo_transform": 12, "parse_output": [12, 21], "run_calc": 12, "write_input": [12, 21], "firework": [13, 22], "break_mol": 13, "core": [13, 16, 19, 22], "util": [14, 24], "db_util": 14, "dbdoc": 14, "fw_util": 14, "gout": 14, "input": 14, "metadata": 14, "misc": 14, "mol": 14, "rdkit": 14, "base": [16, 25], "bde": [16, 33], "binding_energi": 16, "esp": [16, 33], "ip_ea": 16, "nmr": [16, 19], "hybrid": [17, 18, 19, 33], "nmr_from_md": 18, "lammp": [20, 21, 22, 23, 24, 25], "antechamb": 23, "base_test": 23, "control": 23, "custom_data_workflow": 23, "data": 23, "electrolyte_wf": 23, "esp_to_ff_dict_custom": 23, "esp_to_ff_dict_funct": 23, "liquid_wf_loc": 23, "parmchk": 23, "prmtop": 23, "run_lammp": 23, "tleap": 23, "opl": 24, "overview": 27, "faq": 28, "help": 29, "link": 29, "code": 29, "capsul": 29, "basic": 30, "custom": 31, "tutori": 33, "an": 33, "md": 33}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 6, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.viewcode": 1, "sphinx": 56}, "docurls": ["changelog.html", "citing.html", "index.html", "installation/configuration.html", "installation/dependencies.html", "installation/index.html", "installation/test.html", "keywords.html", "license.html", "mispr.html", "mispr.common.html", "mispr.gaussian.html", "mispr.gaussian.firetasks.html", "mispr.gaussian.fireworks.html", "mispr.gaussian.utilities.html", "mispr.gaussian.workflows.html", "mispr.gaussian.workflows.base.html", "mispr.hybrid.html", "mispr.hybrid.firetasks.html", "mispr.hybrid.workflows.html", "mispr.lammps.html", "mispr.lammps.firetasks.html", "mispr.lammps.fireworks.html", "mispr.lammps.tests.html", "mispr.lammps.utilities.html", "mispr.lammps.workflows.html", "modules.html", "overview.html", "resources/faq.html", "resources/resources.html", "workflows/basics.html", "workflows/custom.html", "workflows/supported.html", "workflows/tutorials.html"]})